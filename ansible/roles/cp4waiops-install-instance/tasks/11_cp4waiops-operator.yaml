
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Install CP4WAIOPS PREREQUISITES
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

- name: 🛰️  START - CP4WAIOPS OPERATORS
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Installing CP4WAIOPS Operator"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - CP4WAIOPS Operator'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  






# Create IBM AIOps Operator Group
- name:   🚀 CP4WAIOPS CATALOG - Install Operator Group
  kubernetes.core.k8s:
    state: present
    template: ./templates/waiops/2_opgroup-ibm-aiops.j2



# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for serviceaccount being ready
# --------------------------------------------------------------------------------------------------------------------------------------
- name:   🚀 CP4WAIOPS CATALOG - 🕦 Wait for serviceaccount ibm-operator-catalog to become ready
  shell: oc get -n openshift-marketplace serviceaccount ibm-operator-catalog --no-headers| grep -c ""
  register: kubectl_get_sa
  until: kubectl_get_sa.stdout == "1"
  retries: 500
  delay: 15
  when: current_cp4waiops_feature.case_install==false




# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for CSV being ready
# --------------------------------------------------------------------------------------------------------------------------------------
- name:   🚀 CP4WAIOPS CATALOG - Patch service account for pull secret
  shell: |
    oc patch -n openshift-marketplace serviceaccount ibm-operator-catalog -p '{"imagePullSecrets": [{"name": "ibm-entitlement-key"}]}'
    oc patch -n openshift-marketplace serviceaccount default -p '{"imagePullSecrets": [{"name": "ibm-entitlement-key"}]}'
    errorPods=$(oc get po -n openshift-marketplace|grep ImagePull|awk '{print$1}')
    if [[ ! $errorPods == "" ]]; then
      echo "Refreshing Pods"
      oc delete pod $(oc get po -n openshift-marketplace|grep ImagePull|awk '{print$1}'):-notfound  --ignore-not-found -n openshift-marketplace
    fi
  register: kubectl_get_pods
  ignore_errors: true






# - name: CP4WAIOPS OPERATOR -     🕦 Wait 120 seconds
#   shell: |
#     sleep 120
#   ignore_errors: true



# --------------------------------------------------------------------------------------------------------------------------------------
# Delete lingering Pods before check for reinstall
# --------------------------------------------------------------------------------------------------------------------------------------
- name:   🚀 CP4WAIOPS CATALOG - Delete lingering Pods before check for reinstall
  shell: |
    oc delete pod $(oc get po -n {{ current_cp4waiops_cluster.project }}|grep ContainerStatusUnknown|awk '{print$1}'):-notfound -n {{ current_cp4waiops_cluster.project }} --ignore-not-found
  register: kubectl_get_pods
  ignore_errors: true


# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for Operator to settle
# --------------------------------------------------------------------------------------------------------------------------------------
- name:   🚀 CP4WAIOPS CATALOG - Wait for Operator Catalog to settle
  shell: |
    # Wait for Operator to settle
    sleep 20
  register: kubectl_get_pods
  ignore_errors: true



# --------------------------------------------------------------------------------------------------------------------------------------
# Delete lingering Pods before check for reinstall
# --------------------------------------------------------------------------------------------------------------------------------------
- name:   🚀 CP4WAIOPS CATALOG - Delete operator for pull secret
  shell: |
    oc delete pod $(oc get po -n openshift-marketplace|grep ImagePullBackOff|awk '{print$1}'):-notfound  --ignore-not-found -n openshift-marketplace
  register: kubectl_get_pods
  ignore_errors: true



# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for Marketplace being ready
# --------------------------------------------------------------------------------------------------------------------------------------
- name:   🕦 CP4WAIOPS CATALOG - Wait for ibm-operator-catalog to become ready
  shell: oc get po -n openshift-marketplace |grep ibm-operator-catalog| grep '1/1' | grep -c ""
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "1"
  retries: 500
  delay: 15
  when: current_cp4waiops_feature.case_install==false




# Create IBM AIOps Subscription
- name:   🚀 CP4WAIOPS OPERATOR - Install Subscription - ONLINE
  kubernetes.core.k8s:
    state: present
    template: ./templates/waiops/3_sub-ibm-aiops-subscription.j2
  when: current_cp4waiops_feature.case_install==false

# Create IBM AIOps Subscription
- name:   🚀 CP4WAIOPS OPERATOR - Install Subscription - CASE
  kubernetes.core.k8s:
    state: present
    template: ./templates/waiops/3_sub-ibm-aiops-subscription-case.j2
  when: current_cp4waiops_feature.case_install==true




# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for Marketplace being ready
# --------------------------------------------------------------------------------------------------------------------------------------
# - name: CHECK -              🕦 Wait for openshift-marketplace to become ready
#   shell: oc get po -n openshift-marketplace | grep -v Running |grep -v Completed | grep -c ""
#   register: kubectl_get_pods
#   until: kubectl_get_pods.stdout == "1"
#   retries: 500
#   delay: 15




# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for Operators being ready
# --------------------------------------------------------------------------------------------------------------------------------------
# - name: CHECK -              🕦 Wait for operators to become ready in Namespace {{ current_cp4waiops_cluster.project }}
#   shell: oc get po -n {{ current_cp4waiops_cluster.project }} | grep Running | grep -v "0/1" |grep -c ""
#   register: kubectl_get_pods
#   until: kubectl_get_pods.stdout|int > "6"
#   retries: 500
#   delay: 15





- name: Log
  shell: |
    export MESSAGE=" 🕦 Wait for CSVs to become ready"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: true



- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - 🕦 Wait for ibm-operator-catalog to become ready (about 5-10 minutes) - Started at $(date +%H:%M:%S) UTC'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  

# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for CSV being ready
# --------------------------------------------------------------------------------------------------------------------------------------

- name:   🕦 CP4WAIOPS OPERATOR - Wait for ibm-aiops-orchestrator Subscription to become ready
  shell: oc get csv -n {{ current_cp4waiops_cluster.project }}|grep ibm-aiops-orchestrator|grep "Succeeded"| grep -v ibm-watson-aiops-ui-operator | grep -c ""
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "1"
  retries: 500
  delay: 15
  when: current_cp4waiops_feature.case_install==false



- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - 🕦 Wait for CSVs to become ready (up to 5 minutes) - Started at $(date +%H:%M:%S) UTC'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  



- name:   🕦 CP4WAIOPS OPERATOR - Wait for CSVs to become ready
  shell: oc get csv -n {{ current_cp4waiops_cluster.project }}|grep -v "Succeeded"| grep -v ibm-watson-aiops-ui-operator | grep -v ibm-secure-tunnel| grep -c ""
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "1"
  retries: 500
  delay: 15



# --------------------------------------------------------------------------------------------------------------------------------------
# Freeze IBM Operator Catalog version (if enabled)
# --------------------------------------------------------------------------------------------------------------------------------------
- name:   🚀 CP4WAIOPS CATALOG - Freeze IBM Operator Catalog version
  shell: |
    export FREEZE={{current_cp4waiops_feature.freeze_catalog | default("false") }}
    #echo "FREEZE:$FREEZE"
    if [[ $FREEZE == "True" ]];
    then
      echo " Freezing Catalog Version"
      IMGDIGEST=`oc get pods -n openshift-marketplace -l=olm.catalogSource=ibm-operator-catalog --no-headers -o=jsonpath="{.items[0].status.containerStatuses[0].imageID}" -n openshift-marketplace` && \
      oc patch catalogsource ibm-operator-catalog -n openshift-marketplace --type=json -p "[{ "op": "test", "path": "/spec/image", "value": "\"icr.io/cpopen/ibm-operator-catalog:latest\"" }, { "op": "replace", "path": "/spec/image", "value": "\"$IMGDIGEST\"" }]"
    else
      echo " NOT Freezing Catalog Version"
    fi
  register: output
  ignore_errors: true
  args:
    executable: /bin/bash


- name: 🟣 OUTPUT - FREEZE
  debug: 
    var: output.stdout_lines
    verbosity: 1


- name: Log
  shell: |
    export MESSAGE=" ✅ CSVs are ready"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#009a00'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - CSVs are ready'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  

