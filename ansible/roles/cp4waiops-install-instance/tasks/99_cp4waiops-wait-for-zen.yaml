

# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for Zen in Common Services being ready
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************


# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for Zen in Common Services
# --------------------------------------------------------------------------------------------------------------------------------------


- name: Log
  shell: |
    export MESSAGE=" ðŸ•¦ Wait for Zen to become ready"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: true

- name: ðŸ“£ OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - ðŸ•¦ Wait for Zen to become ready (about 25-35 minutes) - Started at $(date +%H:%M:%S) UTC'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  



# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for AutomationUIConfig ready
# --------------------------------------------------------------------------------------------------------------------------------------
# - name: ðŸ•¦ CHECK -  Wait for Zen AutomationUIConfig being ready (this might take some time)
#   shell: oc get AutomationUIConfig -n {{ current_cp4waiops_cluster.project }} iaf-system  | grep True|grep -c ""
#   register: kubectl_get_pods
#   until: kubectl_get_pods.stdout == "1"
#   retries: 500
#   delay: 15
- name: ðŸ•¦ CHECK -  Wait for Zen AutomationUIConfig being ready (this might take some time)
  shell: oc get ZenServices -n cp4waiops iaf-zen-cpdservice -oyaml | grep 'zenStatus' | grep 'Completed' |grep -c ""
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "1"
  retries: 500
  delay: 15


- name: ðŸ•¦ CHECK -  Wait for Zen Ansible Script zen_ready.stdout in namespace ibm-common-services (this might take some time - up to 30 minutes)
  shell: |
    ZEN_LOGS=$(oc logs $(oc get po -n ibm-common-services|grep ibm-zen-operator|awk '{print$1}') -c ibm-zen-operator -n ibm-common-services|grep -i -E "ok=2|ok=3|ok=4|ok=5|ok=6|ok=7")
    echo $ZEN_LOGS
  register: zen_ready
  until: ("ok" in zen_ready.stdout)
  retries: 500
  delay: 15


- name: Log
  shell: |
    export MESSAGE=" âœ… Zen is ready"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: true

- name: ðŸ“£ OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#009a00'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - Zen is ready'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  



