---
apiVersion: v1
kind: Namespace
metadata:
  name: instana-datastores
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: 'system:openshift:scc:anyuid'
  namespace: instana-datastores
subjects:
  - kind: ServiceAccount
    name: default
    namespace: instana-datastores
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'system:openshift:scc:anyuid'
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: 'system:openshift:scc:privileged'
  namespace: instana-datastores
subjects:
  - kind: ServiceAccount
    name: default
    namespace: instana-datastores
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'system:openshift:scc:privileged'
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: 'system:openshift:scc:hostmount-anyuid'
  namespace: instana-datastores
subjects:
  - kind: ServiceAccount
    name: default
    namespace: instana-datastores
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'system:openshift:scc:hostmount-anyuid'
--- 
apiVersion: v1
data:
  ca.crt: 
  namespace: aW5zdGFuYS1kYXRhc3RvcmVz
  service-ca.crt: 
  token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNkltSlpYMWg2WVhveFNVeDFNM2x4T0ZoeExYRlJSMVJWTUdzeFFrUndUVll5U0ZCc0xUSkhPV3h3ZG1jaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpwYm5OMFlXNWhMV1JoZEdGemRHOXlaWE1pTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxZM0psZEM1dVlXMWxJam9pWW5WcGJHUmxjaTEwYjJ0bGJpMTZORGw0Y2lJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZ5ZG1salpTMWhZMk52ZFc1MExtNWhiV1VpT2lKaWRXbHNaR1Z5SWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXpaWEoyYVdObExXRmpZMjkxYm5RdWRXbGtJam9pTmpFMk9EVXpORFl0TkRZd1l5MDBaamhoTFdGbFkyRXRZbVJpWldVek5XUmxOekprSWl3aWMzVmlJam9pYzNsemRHVnRPbk5sY25acFkyVmhZMk52ZFc1ME9tbHVjM1JoYm1FdFpHRjBZWE4wYjNKbGN6cGlkV2xzWkdWeUluMC5xakNhY2daZ2dtZWdsU3pHeUdjQUZqZ3RPOXV6cS01N0NqWGNmS3RZdlFrdlotRERwcGRiU2M2SGhMQkpHcUZFalVwTEtmUXRiVXNISk5MYnB4NkZJNE4tNXQ4MnBrSlJXSEZYeGxlQUp6TVZMVHUwdHRBTEg3ODdHRVQ1a0p4NVdmZ3Y3dWlyajhiejNjaUxkbTB0cnRoZDU0bkI5Z3MwX1M4eDdKSVZnWmhjUGZWSEk5QzAzQzRNNl93YTc5OV91TDFBT2pqTkVhUUdZaDRkZDUtbE91UXlMWklBUm1SLUJDeVZsSlRmd01qeWtjeG0za1NsN19LS2ZBdWJFQXQ3TTVNczJoaHVPM0Nld0F2WHdVNjQtY1IzRTdEN1NtOTBWcF9GZlNtRHFwV2VfQzFrY1JiQ2pqdXJnLUxmTTgzbHlPWndEdWoxZEdYTTFoRUdoVjlkSW9FTjBCYWpUMnNYaHk0YjRxLS15NGtkMndnbEh2a2tEM0lxTnMzTTFzWFFxbDFLYTBsSWxNaDFxLVRtVVFxR256MGJOc2ktM0pwZjhhR2Y4NXllRlhJUHo4Rk9aRkhvZmxvQXBsYUtKZjNaSzdFOWcxR3VCcXFnYXpwSWVnM3pvMWhKVTlUTU11WUNSZUxzZDZOSjV5Wl9uUVZ5WURvSDlBZXlMbW92WkpfdmVRM1FKMzBiTWVHdHQ5dEhBVDJrWkY5Y2M1VjROb2lMRjgzbHZLaV9KdmtZekZYUzdrSjhqbWZnRW8tbDl6VzVqSENqb3I1UjlTUzZGOGZqY2tMdUtsNldaTFdSQWRBVlZBQW9zRkhBTzJTbnlSMmpNczdUNzlFTDhNbHVaamxJZUp0cjB4amE5aC1kS2gtel9DRm1TVVlrU29GTWNCOFZTRld6ZnBTNWNHYw==
kind: Secret
metadata:
  annotations:
    kubernetes.io/service-account.name: builder
    kubernetes.io/service-account.uid: 61685346-460c-4f8a-aeca-bdbee35de72d
  creationTimestamp: "2023-05-11T11:40:03Z"
  name: builder-token-z49xr
  namespace: instana-datastores
  resourceVersion: "10309314"
  uid: 17c6c5c4-cf1a-4b07-8349-119bd97673eb
type: kubernetes.io/service-account-token
--- 
apiVersion: v1
data:
  cassandra-ro.yaml: 
  trustStorePassword: Y2hhbmdlaXQ=
kind: Secret
metadata:
  name: default-cassandra
  namespace: instana-datastores
type: Opaque
---
apiVersion: v1
data:
  instana_specific.xml: PD94bWwgdmVyc2lvbj0iMS4wIj8+CjxjbGlja2hvdXNlPgogICAgPGxvZ2dlcj4KICAgICAgICA8Y29uc29sZT50cnVlPC9jb25zb2xlPgogICAgICAgIDxsb2cgcmVtb3ZlPSJyZW1vdmUiLz4KICAgICAgICA8ZXJyb3Jsb2cgcmVtb3ZlPSJyZW1vdmUiLz4KICAgIDwvbG9nZ2VyPgoKICAgIDxsaXN0ZW5faG9zdD4wLjAuMC4wPC9saXN0ZW5faG9zdD4KCiAgICA8em9va2VlcGVyPgogICAgICAgIDxub2RlIGluZGV4PSIxIj4KICAgICAgICAgICAgPGhvc3Q+ZGVmYXVsdC1jbGlja2hvdXNlLXpvb2tlZXBlcjwvaG9zdD4KICAgICAgICAgICAgPHBvcnQ+MjE4MTwvcG9ydD4KICAgICAgICA8L25vZGU+CiAgICAgICAgPHNlc3Npb25fdGltZW91dF9tcz42MDAwMDwvc2Vzc2lvbl90aW1lb3V0X21zPgogICAgPC96b29rZWVwZXI+CgogICAgPG1heF9zZXJ2ZXJfbWVtb3J5X3VzYWdlX3RvX3JhbV9yYXRpbz4wPC9tYXhfc2VydmVyX21lbW9yeV91c2FnZV90b19yYW1fcmF0aW8+CgogICAgPG1heF90YWJsZV9zaXplX3RvX2Ryb3A+MDwvbWF4X3RhYmxlX3NpemVfdG9fZHJvcD4KICAgIDxtYXhfcGFydGl0aW9uX3NpemVfdG9fZHJvcD4wPC9tYXhfcGFydGl0aW9uX3NpemVfdG9fZHJvcD4KCiAgICA8bWVyZ2VfdHJlZT4KICAgICAgICA8bWF4X3N1c3BpY2lvdXNfYnJva2VuX3BhcnRzPjEwMDwvbWF4X3N1c3BpY2lvdXNfYnJva2VuX3BhcnRzPgogICAgPC9tZXJnZV90cmVlPgoKICAgIDxyZW1vdGVfc2VydmVycz4KICAgICAgICA8bG9jYWw+CiAgICAgICAgICAgIDxzaGFyZD4KICAgICAgICAgICAgICAgIDxpbnRlcm5hbF9yZXBsaWNhdGlvbj50cnVlPC9pbnRlcm5hbF9yZXBsaWNhdGlvbj4KICAgICAgICAgICAgICAgIDxyZXBsaWNhPgogICAgICAgICAgICAgICAgICAgIDxob3N0PmxvY2FsaG9zdDwvaG9zdD4KICAgICAgICAgICAgICAgICAgICA8cG9ydD45MDAwPC9wb3J0PgogICAgICAgICAgICAgICAgPC9yZXBsaWNhPgogICAgICAgICAgICA8L3NoYXJkPgogICAgICAgIDwvbG9jYWw+CiAgICA8L3JlbW90ZV9zZXJ2ZXJzPgoKICAgIDxzdG9yYWdlX2NvbmZpZ3VyYXRpb24+CiAgICAgICAgPGRpc2tzPgogICAgICAgICAgICA8ZGVmYXVsdC8+CiAgICAgICAgPC9kaXNrcz4KICAgICAgICA8cG9saWNpZXM+CiAgICAgICAgICAgIDxsb2dzX3BvbGljeT4KICAgICAgICAgICAgICAgIDx2b2x1bWVzPgogICAgICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGlzaz5kZWZhdWx0PC9kaXNrPgogICAgICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgICAgIDwvdm9sdW1lcz4KICAgICAgICAgICAgPC9sb2dzX3BvbGljeT4KICAgICAgICA8L3BvbGljaWVzPgogICAgPC9zdG9yYWdlX2NvbmZpZ3VyYXRpb24+CgogICAgPG1hY3Jvcz4KICAgICAgICA8Y2x1c3Rlcj5sb2NhbDwvY2x1c3Rlcj4KICAgICAgICA8c2hhcmQ+MTwvc2hhcmQ+CiAgICAgICAgPHJlcGxpY2E+bG9jYWxob3N0PC9yZXBsaWNhPgogICAgPC9tYWNyb3M+CjwvY2xpY2tob3VzZT4K
  user.xml: PD94bWwgdmVyc2lvbj0iMS4wIj8+CjxjbGlja2hvdXNlPgogICAgPHByb2ZpbGVzPgogICAgICAgIDxkZWZhdWx0PgogICAgICAgICAgICA8bWF4X21lbW9yeV91c2FnZT4xMDAwMDAwMDAwMDwvbWF4X21lbW9yeV91c2FnZT4KICAgICAgICAgICAgPGpvaW5lZF9zdWJxdWVyeV9yZXF1aXJlc19hbGlhcz4wPC9qb2luZWRfc3VicXVlcnlfcmVxdWlyZXNfYWxpYXM+CiAgICAgICAgICAgIDxtYXhfZXhlY3V0aW9uX3RpbWU+MTAwPC9tYXhfZXhlY3V0aW9uX3RpbWU+CiAgICAgICAgICAgIDxtYXhfcXVlcnlfc2l6ZT4xMDQ4NTc2PC9tYXhfcXVlcnlfc2l6ZT4KICAgICAgICAgICAgPHVzZV91bmNvbXByZXNzZWRfY2FjaGU+MDwvdXNlX3VuY29tcHJlc3NlZF9jYWNoZT4KICAgICAgICAgICAgPGxvYWRfYmFsYW5jaW5nPnJhbmRvbTwvbG9hZF9iYWxhbmNpbmc+CiAgICAgICAgICAgIDxiYWNrZ3JvdW5kX3Bvb2xfc2l6ZT4zMjwvYmFja2dyb3VuZF9wb29sX3NpemU+CiAgICAgICAgICAgIDxiYWNrZ3JvdW5kX3NjaGVkdWxlX3Bvb2xfc2l6ZT4zMjwvYmFja2dyb3VuZF9zY2hlZHVsZV9wb29sX3NpemU+CiAgICAgICAgPC9kZWZhdWx0PgogICAgPC9wcm9maWxlcz4KCiAgICA8cXVvdGFzPgogICAgICAgIDxkZWZhdWx0PgogICAgICAgICAgICA8aW50ZXJ2YWw+CiAgICAgICAgICAgICAgICA8ZHVyYXRpb24+MzYwMDwvZHVyYXRpb24+CiAgICAgICAgICAgICAgICA8cXVlcmllcz4wPC9xdWVyaWVzPgogICAgICAgICAgICAgICAgPGVycm9ycz4wPC9lcnJvcnM+CiAgICAgICAgICAgICAgICA8cmVzdWx0X3Jvd3M+MDwvcmVzdWx0X3Jvd3M+CiAgICAgICAgICAgICAgICA8cmVhZF9yb3dzPjA8L3JlYWRfcm93cz4KICAgICAgICAgICAgICAgIDxleGVjdXRpb25fdGltZT4wPC9leGVjdXRpb25fdGltZT4KICAgICAgICAgICAgPC9pbnRlcnZhbD4KICAgICAgICA8L2RlZmF1bHQ+CiAgICA8L3F1b3Rhcz4KCiAgICA8dXNlcnM+CiAgICAgICAgPGRlZmF1bHQ+CiAgICAgICAgCiAgICAgICAgICAgIDxub19wYXNzd29yZCAvPgogICAgICAgIAogICAgICAgICAgICA8bmV0d29ya3M+CiAgICAgICAgICAgICAgICA8aXA+OjovMDwvaXA+CiAgICAgICAgICAgIDwvbmV0d29ya3M+CiAgICAgICAgICAgIDxwcm9maWxlPmRlZmF1bHQ8L3Byb2ZpbGU+CiAgICAgICAgICAgIDxxdW90YT5kZWZhdWx0PC9xdW90YT4KICAgICAgICA8L2RlZmF1bHQ+CiAgICA8L3VzZXJzPgo8L2NsaWNraG91c2U+Cg==
kind: Secret
metadata:
  name: default-clickhouse
  namespace: instana-datastores
type: Opaque
---
apiVersion: v1
data:
  log4j.properties: em9va2VlcGVyLnJvb3QubG9nZ2VyPUlORk8sIENPTlNPTEUKem9va2VlcGVyLmNvbnNvbGUudGhyZXNob2xkPUlORk8KbG9nNGoucm9vdExvZ2dlcj1JTkZPLCBDT05TT0xFCmxvZzRqLmFwcGVuZGVyLkNPTlNPTEU9b3JnLmFwYWNoZS5sb2c0ai5Db25zb2xlQXBwZW5kZXIKbG9nNGouYXBwZW5kZXIuQ09OU09MRS5UaHJlc2hvbGQ9SU5GTwpsb2c0ai5hcHBlbmRlci5DT05TT0xFLmxheW91dD1vcmcuYXBhY2hlLmxvZzRqLlBhdHRlcm5MYXlvdXQKbG9nNGouYXBwZW5kZXIuQ09OU09MRS5sYXlvdXQuQ29udmVyc2lvblBhdHRlcm49JWR7SVNPODYwMX0gW215aWQ6JVh7bXlpZH1dIC0gJS01cCBbJXQ6JUN7MX1AJUxdIC0gJW0lbgp6b29rZWVwZXIuYXVkaXRsb2cuZmlsZT16b29rZWVwZXJfYXVkaXQubG9nCnpvb2tlZXBlci5hdWRpdGxvZy50aHJlc2hvbGQ9SU5GTwphdWRpdC5sb2dnZXI9SU5GTywgQ09OU09MRQpsb2c0ai5sb2dnZXIub3JnLmFwYWNoZS56b29rZWVwZXIuYXVkaXQuTG9nNGpBdWRpdExvZ2dlcj1JTkZPLCBDT05TT0xFCmxvZzRqLmFkZGl0aXZpdHkub3JnLmFwYWNoZS56b29rZWVwZXIuYXVkaXQuTG9nNGpBdWRpdExvZ2dlcj1mYWxzZQo=
  zoo.cfg: ZGF0YURpcj0vZGF0YQpkYXRhTG9nRGlyPS9kYXRhbG9nCnRpY2tUaW1lPTIwMDAKaW5pdExpbWl0PTEwCnN5bmNMaW1pdD01CmF1dG9wdXJnZS5zbmFwUmV0YWluQ291bnQ9MjAKYXV0b3B1cmdlLnB1cmdlSW50ZXJ2YWw9MQptYXhDbGllbnRDbnhucz0wCnN0YW5kYWxvbmVFbmFibGVkPXRydWUKYWRtaW4uZW5hYmxlU2VydmVyPWZhbHNlCmNsaWVudFBvcnQ9MjE4MQpzZXJ2ZXIuMT1sb2NhbGhvc3Q6Mjg4ODozODg4OzIxODEK
kind: Secret
metadata:
  name: default-clickhouse-zookeeper
  namespace: instana-datastores
type: Opaque

---
apiVersion: v1
data:
  elasticsearch.yml: IyBPZmZpY2lhbCBlbGFzdGljc2VhcmNoLnltbCBodHRwczovL2dpdGh1Yi5jb20vZWxhc3RpYy9kb2NrZXJmaWxlcy9ibG9iL3Y3LjE2LjMvZWxhc3RpY3NlYXJjaC9jb25maWcvZWxhc3RpY3NlYXJjaC55bWwKCmNsdXN0ZXIubmFtZTogb25wcmVtX29ucHJlbQpuZXR3b3JrLmhvc3Q6IDAuMC4wLjAKaHR0cC5wdWJsaXNoX2hvc3Q6ICR7RVNfSFRUUF9QVUJMSVNIX0hPU1R9CgpkaXNjb3ZlcnkudHlwZTogc2luZ2xlLW5vZGUKCiMgbGltaXRzCmluZGljZXMuYnJlYWtlci5maWVsZGRhdGEubGltaXQ6ICI3NSUiCmluZ2VzdC5nZW9pcC5kb3dubG9hZGVyLmVuYWJsZWQ6IGZhbHNlCiMgWC1QYWNrIFNlY3VyaXR5CnhwYWNrLnNlY3VyaXR5LmVuYWJsZWQ6IGZhbHNlCgojIEZJUFMgbW9kZSwgZGVmYXVsdCBpcyBmYWxzZQp4cGFjay5zZWN1cml0eS5maXBzX21vZGUuZW5hYmxlZDogZmFsc2UKCiMgZXhwbGljaXRseSBkaXNhYmxlIG1hY2hpbmUgbGVhcm5pbmcgZHVlIHRvIE1hY2hpbmUgTGVhcm5pbmcKeHBhY2subWwuZW5hYmxlZDogZmFsc2UK
kind: Secret
metadata:
  name: default-elasticsearch
  namespace: instana-datastores
type: Opaque
---
apiVersion: v1
data:
  log4j.properties: bG9nNGoucm9vdExvZ2dlcj1JTkZPLCBzdGRvdXQKbG9nNGouYXBwZW5kZXIuc3Rkb3V0PW9yZy5hcGFjaGUubG9nNGouQ29uc29sZUFwcGVuZGVyCmxvZzRqLmFwcGVuZGVyLnN0ZG91dC5sYXlvdXQ9b3JnLmFwYWNoZS5sb2c0ai5QYXR0ZXJuTGF5b3V0CmxvZzRqLmFwcGVuZGVyLnN0ZG91dC5sYXlvdXQuQ29udmVyc2lvblBhdHRlcm49WyVkXSAlcCAlbSAoJWMpJW4KbG9nNGoubG9nZ2VyLm9yZy5hcGFjaGUuem9va2VlcGVyPUlORk8KbG9nNGoubG9nZ2VyLmthZmthPUlORk8KbG9nNGoubG9nZ2VyLm9yZy5hcGFjaGUua2Fma2E9SU5GTwo=
  server.properties: c2VjdXJpdHkuaW50ZXIuYnJva2VyLnByb3RvY29sPVBMQUlOVEVYVAoKbGlzdGVuZXJzPVBMQUlOVEVYVDovLzo5MDkyCmxvZy5kaXJzPS9vcHQva2Fma2EvZGF0YQp6b29rZWVwZXIuY29ubmVjdD1kZWZhdWx0LWthZmthLXpvb2tlZXBlcjoyMTgxL2thZmthCmF1dG8uY3JlYXRlLnRvcGljcy5lbmFibGU9dHJ1ZQphdXRvLmxlYWRlci5yZWJhbGFuY2UuZW5hYmxlPXRydWUKYnJva2VyLmlkPTEKY29udHJvbGxlZC5zaHV0ZG93bi5lbmFibGU9dHJ1ZQpkZWZhdWx0LnJlcGxpY2F0aW9uLmZhY3Rvcj0xCmxvZy5yZXRlbnRpb24uaG91cnM9MQptZXNzYWdlLm1heC5ieXRlcz01MjQyODgwMApvZmZzZXRzLnRvcGljLnJlcGxpY2F0aW9uLmZhY3Rvcj0xCnJlcGxpY2EuZmV0Y2gubWF4LmJ5dGVzPTUyNDI4ODAwCnpvb2tlZXBlci5zZXNzaW9uLnRpbWVvdXQubXM9MTAwMDAKdHJhbnNhY3Rpb24uc3RhdGUubG9nLnJlcGxpY2F0aW9uLmZhY3Rvcj0xCnRyYW5zYWN0aW9uLnN0YXRlLmxvZy5taW4uaXNyPTEKbWluLmluc3luYy5yZXBsaWNhcz0xCmludGVyLmJyb2tlci5wcm90b2NvbC52ZXJzaW9uPTMuMQo=
kind: Secret
metadata:
  name: default-kafka
  namespace: instana-datastores
type: Opaque
---
apiVersion: v1
data:
  log4j.properties: em9va2VlcGVyLnJvb3QubG9nZ2VyPUlORk8sIENPTlNPTEUKem9va2VlcGVyLmNvbnNvbGUudGhyZXNob2xkPUlORk8KbG9nNGoucm9vdExvZ2dlcj1JTkZPLCBDT05TT0xFCmxvZzRqLmFwcGVuZGVyLkNPTlNPTEU9b3JnLmFwYWNoZS5sb2c0ai5Db25zb2xlQXBwZW5kZXIKbG9nNGouYXBwZW5kZXIuQ09OU09MRS5UaHJlc2hvbGQ9SU5GTwpsb2c0ai5hcHBlbmRlci5DT05TT0xFLmxheW91dD1vcmcuYXBhY2hlLmxvZzRqLlBhdHRlcm5MYXlvdXQKbG9nNGouYXBwZW5kZXIuQ09OU09MRS5sYXlvdXQuQ29udmVyc2lvblBhdHRlcm49JWR7SVNPODYwMX0gW215aWQ6JVh7bXlpZH1dIC0gJS01cCBbJXQ6JUN7MX1AJUxdIC0gJW0lbgp6b29rZWVwZXIuYXVkaXRsb2cuZmlsZT16b29rZWVwZXJfYXVkaXQubG9nCnpvb2tlZXBlci5hdWRpdGxvZy50aHJlc2hvbGQ9SU5GTwphdWRpdC5sb2dnZXI9SU5GTywgQ09OU09MRQpsb2c0ai5sb2dnZXIub3JnLmFwYWNoZS56b29rZWVwZXIuYXVkaXQuTG9nNGpBdWRpdExvZ2dlcj1JTkZPLCBDT05TT0xFCmxvZzRqLmFkZGl0aXZpdHkub3JnLmFwYWNoZS56b29rZWVwZXIuYXVkaXQuTG9nNGpBdWRpdExvZ2dlcj1mYWxzZQo=
  zoo.cfg: ZGF0YURpcj0vZGF0YQpkYXRhTG9nRGlyPS9kYXRhbG9nCnRpY2tUaW1lPTIwMDAKaW5pdExpbWl0PTEwCnN5bmNMaW1pdD01CmF1dG9wdXJnZS5zbmFwUmV0YWluQ291bnQ9MjAKYXV0b3B1cmdlLnB1cmdlSW50ZXJ2YWw9MQptYXhDbGllbnRDbnhucz0wCnN0YW5kYWxvbmVFbmFibGVkPXRydWUKYWRtaW4uZW5hYmxlU2VydmVyPWZhbHNlCmNsaWVudFBvcnQ9MjE4MQpzZXJ2ZXIuMT1sb2NhbGhvc3Q6Mjg4ODozODg4OzIxODEK
kind: Secret
metadata:
  name: default-kafka-zookeeper
  namespace: instana-datastores
type: Opaque


---
apiVersion: v1
data:
  config.yaml: Y2Fzc2FuZHJhOgogIC0gbmFtZTogZGVmYXVsdAogICAgYWRtaW5Vc2VyOiBjYXNzYW5kcmFfdXNlcgogICAgYWRtaW5QYXNzd29yZDogY2Fzc2FuZHJhX3Zlcnljb21wbGljYXRlZGFuZGxvbmdwYXNzd29yZApjbGlja2hvdXNlOgogIC0gbmFtZTogZGVmYXVsdAogICAgYWRtaW5Vc2VyOiBjbGlja2hvdXNlX3VzZXIKICAgIGFkbWluUGFzc3dvcmQ6IGNsaWNraG91c2VfdmVyeWNvbXBsaWNhdGVkYW5kbG9uZ3Bhc3N3b3JkCmVsYXN0aWNzZWFyY2g6CiAgbmFtZTogZGVmYXVsdAogIGFkbWluVXNlcjogZWxhc3RpY3NlYXJjaF91c2VyCiAgYWRtaW5QYXNzd29yZDogZWxhc3RpY3NlYXJjaF92ZXJ5Y29tcGxpY2F0ZWRhbmRsb25ncGFzc3dvcmQKa2Fma2E6CiAgbmFtZTogZGVmYXVsdAogIGFkbWluVXNlcjoga2Fma2FfdXNlcgogIGFkbWluUGFzc3dvcmQ6IGthZmthX3Bhc3MKcG9zdGdyZXM6CiAgLSBuYW1lOiBkZWZhdWx0CiAgICBhZG1pblVzZXI6IHBvc3RncmVzX3VzZXIKICAgIGFkbWluUGFzc3dvcmQ6IHBvc3RncmVzX3Zlcnljb21wbGljYXRlZGFuZGxvbmdwYXNzd29yZA==
kind: Secret
metadata:
  name: instana-datastores
  namespace: instana-datastores
type: Generic
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJjb250YWluZXJzLmluc3RhbmEuaW8iOnsidXNlcm5hbWUiOiJfIiwicGFzc3dvcmQiOiJxVU1oWUp4alN2NnVaaDJTeXFURW53IiwiYXV0aCI6Ilh6cHhWVTFvV1VwNGFsTjJOblZhYURKVGVYRlVSVzUzIn19fQ==
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: instana
  name: instana-registry
  namespace: instana-datastores
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  adminUser: cG9zdGdyZXM=
  postgresql.conf: 
kind: Secret
metadata:
  name: default-postgres
  namespace: instana-datastores
type: Opaque
