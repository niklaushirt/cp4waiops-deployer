
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-cassandra
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-cassandra
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-cassandra-headless
  template:
    metadata:
      annotations:
        checksum.instana.io/secret: f9633bc26f4278fd0c42675128a59e986a4a3f7348b53ef57cbfe8da5b1598ae
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-cassandra
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
    spec:
      containers:
      - env:
        - name: TRUST_STORE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: trustStorePassword
              name: default-cassandra
        - name: JVM_OPTS
          value: -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:VM
            -Dcassandra.allow_unsafe_aggressive_sstable_expiration=true
        - name: RCP_ADDRESS
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        image: containers.instana.io/instana/release/product/k8s/cassandra:4.0.7_v0.38.0
        imagePullPolicy: IfNotPresent
        name: cassandra
        ports:
        - containerPort: 9042
          name: tcp
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /usr/local/bin/ready-probe.sh
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "1"
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - ALL
          privileged: true
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/cassandra
          name: data
        - mountPath: /etc/cassandra/cassandra-ro.yaml
          name: secret
          readOnly: true
          subPath: cassandra-ro.yaml
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-cassandra
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_LARGE_BLOCK }}
      volumeMode: Filesystem
--- 
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-clickhouse
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-clickhouse
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-clickhouse-headless
  template:
    metadata:
      annotations:
        checksum.instana.io/secret: 19ab702be2662796884a8daedc094fdc3fd806e263353d90f7522ef977d8897e
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-clickhouse
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
    spec:
      containers:
      - image: containers.instana.io/instana/release/product/k8s/clickhouse:22.3.15.33-1-lts-ibm_v0.16.0
        imagePullPolicy: IfNotPresent
        name: clickhouse
        ports:
        - containerPort: 9000
          name: tcp
          protocol: TCP
        - containerPort: 8123
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8123
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 12Gi
          requests:
            cpu: "1"
            memory: 1Gi
        securityContext:
          runAsUser: 1000
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - ALL
          privileged: true
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/clickhouse
          name: data
        - mountPath: /etc/clickhouse-server/config.d/instana_specific.xml
          name: secret
          readOnly: true
          subPath: instana_specific.xml
        - mountPath: /etc/clickhouse-server/users.d//user.xml
          name: secret
          readOnly: true
          subPath: user.xml
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-clickhouse
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: ocs-storagecluster-cephfs
      volumeMode: Filesystem
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-clickhouse-zookeeper
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-clickhouse-zookeeper
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-clickhouse-zookeeper-headless
  template:
    metadata:
      annotations:
        checksum.instana.io/secret: fd1c96babb80882f1ca029ec4c62f40e4f96d8b508569b53850345dcd831750d
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-clickhouse-zookeeper
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
    spec:
      containers:
      - env:
        - name: JVMFLAGS
          value: -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:VM
            -Dcom.redhat.fips=false
        image: containers.instana.io/instana/release/product/k8s/zookeeper:3.7.1_v0.25.0
        imagePullPolicy: IfNotPresent
        name: zookeeper
        ports:
        - containerPort: 2181
          name: tcp
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - zkServer.sh status | grep standalone
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - ALL
          privileged: true
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: data
          subPath: data
        - mountPath: /datalog
          name: data
          subPath: datalog
        - mountPath: /conf/zoo.cfg
          name: secret
          readOnly: true
          subPath: zoo.cfg
        - mountPath: /opt/kafka/config/log4j.properties
          name: secret
          readOnly: true
          subPath: log4j.properties
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-clickhouse-zookeeper
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_LARGE_BLOCK }}
      volumeMode: Filesystem
--- 
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-elasticsearch
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-elasticsearch
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-elasticsearch-headless
  template:
    metadata:
      annotations:
        checksum.instana.io/secret: 0ecef3ea910356bb407a1afc277233cf9628677addcf4bbe88031f83c769e91d
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-elasticsearch
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
    spec:
      containers:
      - env:
        - name: DEFAULT_HEAP_OPTS
          value: -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:VM
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: ES_HTTP_PUBLISH_HOST
          value: $(POD_NAME).default-elasticsearch-headless.instana-datastores
        image: containers.instana.io/instana/release/product/k8s/elasticsearch:7.16.3_v0.25.0
        imagePullPolicy: IfNotPresent
        name: elasticsearch
        ports:
        - containerPort: 9300
          name: tcp
          protocol: TCP
        - containerPort: 9200
          name: http
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /usr/share/elasticsearch/bin/ready-probe.sh
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "1"
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - ALL
          privileged: true
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
          subPath: data
        - mountPath: /usr/share/elasticsearch/logs
          name: data
          subPath: logs
        - mountPath: /usr/share/elasticsearch/plugins
          name: data
          subPath: plugins
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: secret
          readOnly: true
          subPath: elasticsearch.yml
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-elasticsearch
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_LARGE_BLOCK }}
      volumeMode: Filesystem
--- 
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-kafka
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-kafka
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-kafka-headless
  template:
    metadata:
      annotations:
        checksum.instana.io/secret: 05fd78040dac5cce74db7ab1a1746694d091d079f5a9e962d7bc2863bf585923
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-kafka
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
    spec:
      containers:
      - env:
        - name: KAFKA_HEAP_OPTS
          value: -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:VM
        - name: KAFKA_OPTS
          value: -Dcom.redhat.fips=false
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: KAFKA_ADVERTISED_LISTENERS
          value: PLAINTEXT://$(POD_NAME).default-headless.instana-datastores:9092
        - name: KAFKA_JVM_PERFORMANCE_OPTS
          value: -server -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:G1HeapRegionSize=16M
            -XX:MaxGCPauseMillis=20 -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80
            -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent
            -Djava.awt.headless=true
        image: containers.instana.io/instana/release/product/k8s/kafka:3.4.0_v0.27.0
        imagePullPolicy: IfNotPresent
        name: kafka
        ports:
        - containerPort: 9092
          name: tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: tcp
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - ALL
          privileged: true
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/kafka/data
          name: data
          subPath: data
        - mountPath: /opt/kafka/config/server.properties
          name: secret
          readOnly: true
          subPath: server.properties
        - mountPath: /opt/kafka/config/log4j.properties
          name: secret
          readOnly: true
          subPath: log4j.properties
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      initContainers:
      - command:
        - sh
        - -c
        - echo "Waiting for default-kafka-zookeeper to become ready...";until printf
          "." && nc -z -w 2 default-kafka-zookeeper:2181; do sleep 2; done; echo
          "default-kafka-zookeeper is ready.";
        image: docker.io/busybox:1.34
        imagePullPolicy: IfNotPresent
        name: zkchecker
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-kafka
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_LARGE_BLOCK }}
      volumeMode: Filesystem
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-kafka-zookeeper
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-kafka-zookeeper
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-kafka-zookeeper-headless
  template:
    metadata:
      annotations:
        checksum.instana.io/secret: fd1c96babb80882f1ca029ec4c62f40e4f96d8b508569b53850345dcd831750d
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-kafka-zookeeper
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
    spec:
      containers:
      - env:
        - name: JVMFLAGS
          value: -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XshowSettings:VM
            -Dcom.redhat.fips=false
        image: containers.instana.io/instana/release/product/k8s/zookeeper:3.7.1_v0.25.0
        imagePullPolicy: IfNotPresent
        name: zookeeper
        ports:
        - containerPort: 2181
          name: tcp
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - zkServer.sh status | grep standalone
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - ALL
          privileged: true
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: data
          subPath: data
        - mountPath: /datalog
          name: data
          subPath: datalog
        - mountPath: /conf/zoo.cfg
          name: secret
          readOnly: true
          subPath: zoo.cfg
        - mountPath: /opt/kafka/config/log4j.properties
          name: secret
          readOnly: true
          subPath: log4j.properties
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-kafka-zookeeper
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_LARGE_BLOCK }}
      volumeMode: Filesystem
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: default-postgres
  namespace: instana-datastores
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: default-postgres
      app.kubernetes.io/name: instana
      app.kubernetes.io/part-of: datastores
      instana.io/group: datastore
  serviceName: default-postgres-headless
  template:
    metadata:
      annotations:
        checksum.instana.io/secret: d273aca0518477e38de71114855bb0ffa819db8278c08471a38ef6638cffb3c7
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: default-postgres
        app.kubernetes.io/name: instana
        app.kubernetes.io/part-of: datastores
        instana.io/group: datastore
    spec:
      containers:
      - env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: adminUser
              name: default-postgres
        - name: POSTGRES_HOST_AUTH_METHOD
          value: trust
        image: containers.instana.io/instana/release/product/k8s/postgres:15.2_v0.32.0
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - kill
              - -SIGINT
              - "1"
        name: postgres
        ports:
        - containerPort: 5432
          name: tcp
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready --username=$POSTGRES_USER --host=127.0.0.1 --port=5432
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - ALL
          privileged: true
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/postgresql
          name: data
        - mountPath: /etc/postgres/postgresql.conf
          name: secret
          readOnly: true
          subPath: postgresql.conf
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      imagePullSecrets:
      - name: instana-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: secret
        secret:
          defaultMode: 420
          secretName: default-postgres
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      name: data
      namespace: instana-datastores
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi
      storageClassName: {{ WAIOPS_STORAGE_CLASS_LARGE_BLOCK }}
      volumeMode: Filesystem
