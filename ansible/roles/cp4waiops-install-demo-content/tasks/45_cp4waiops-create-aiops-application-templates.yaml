
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Connection Details
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

- name: 🛰️  START - CREATE TEMPLATES AND APPS
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"





- name: Log
  shell: |
    export MESSAGE="Create CP4WAIOps Application"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - Create CP4WAIOps Application'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  




# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# APPLICATION ROBOT SHOP
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - CREATE TOPOLOGY TEMPLATES RobotShop
  shell: |
    set -x
        
    echo "Create Custom Topology - Create Template"
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    oc create route passthrough topology-manage -n $WAIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
    export TOPO_MGT_ROUTE="https://"$(oc get route -n $WAIOPS_NAMESPACE topology-manage -o jsonpath={.spec.host})

 
    export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

    echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
    echo "    LOGIN: $LOGIN"

    export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Drobot-shop-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
    export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Drobot-shop-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)

    echo "    APP_ID: $APP_ID"
    echo "    TEMPLATE_ID: $TEMPLATE_ID"

    if [[ $TEMPLATE_ID == "" ]];
    then
      echo "  Create Template"
      curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -d '  {
          "keyIndexName": "robot-shop-template",
          "_correlationEnabled": "true",
          "iconId": "application",
          "businessCriticality": "Gold",
          "vertexType": "group",
          "groupTokens": [
              "namespace:robot-shop"
          ],
          "correlatable": "true",
          "name": "robot-shop-template",
          "entityTypes": [
              "completeGroup",
              "namespace"
          ],
          "tags": [
              "robot-shop-template"
          ]
      }'
    else
      echo "  Recreate Template"
      curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$TEMPLATE_ID" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

      
      curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -d '  {
          "keyIndexName": "robot-shop-template",
          "_correlationEnabled": "true",
          "iconId": "application",
          "businessCriticality": "Gold",
          "vertexType": "group",
          "groupTokens": [
              "namespace:robot-shop"
          ],
          "correlatable": "true",
          "name": "robot-shop-template",
          "entityTypes": [
              "completeGroup",
              "namespace"
          ],
          "tags": [
              "robot-shop-template"
          ]
      }'

    fi

  
  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1





# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# APPLICATION SOCK SHOP
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - CREATE TOPOLOGY TEMPLATES SOCK
  shell: |
    set -x
        
    echo "Create Custom Topology - Create Template"
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    oc create route passthrough topology-manage -n $WAIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
    export TOPO_MGT_ROUTE="https://"$(oc get route -n $WAIOPS_NAMESPACE topology-manage -o jsonpath={.spec.host})

 
    export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

    echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
    echo "    LOGIN: $LOGIN"

    export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dsock-shop-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
    export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dsock-shop-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)

    echo "    APP_ID: $APP_ID"
    echo "    TEMPLATE_ID: $TEMPLATE_ID"

    if [[ $TEMPLATE_ID == "" ]];
    then
      echo "  Create Template"
      curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -d '  {
          "keyIndexName": "sock-shop-template",
          "_correlationEnabled": "true",
          "iconId": "application",
          "businessCriticality": "Gold",
          "vertexType": "group",
          "groupTokens": [
              "namespace:sock-shop"
          ],
          "correlatable": "true",
          "name": "sock-shop-template",
          "entityTypes": [
              "completeGroup",
              "namespace"
          ],
          "tags": [
              "sock-shop-template"
          ]
      }'
    else
      echo "  Recreate Template"
      curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$TEMPLATE_ID" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

      
      curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -d '  {
          "keyIndexName": "sock-shop-template",
          "_correlationEnabled": "true",
          "iconId": "application",
          "businessCriticality": "Gold",
          "vertexType": "group",
          "groupTokens": [
              "namespace:sock-shop"
          ],
          "correlatable": "true",
          "name": "sock-shop-template",
          "entityTypes": [
              "completeGroup",
              "namespace"
          ],
          "tags": [
              "sock-shop-template"
          ]
      }'

    fi

  
  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1




# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# APPLICATION ACME
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - CREATE TOPOLOGY TEMPLATES ACME
  shell: |
    set -x
        
    echo "Create Custom Topology - Create Template"
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    oc create route passthrough topology-manage -n $WAIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
    export TOPO_MGT_ROUTE="https://"$(oc get route -n $WAIOPS_NAMESPACE topology-manage -o jsonpath={.spec.host})

 
    export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

    echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
    echo "    LOGIN: $LOGIN"

    export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dacme-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
    export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dacme-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)

    echo "    APP_ID: $APP_ID"
    echo "    TEMPLATE_ID: $TEMPLATE_ID"

    if [[ $TEMPLATE_ID == "" ]];
    then
      echo "  Create Template"
      curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -d '  {
          "keyIndexName": "acme-template",
          "_correlationEnabled": "true",
          "iconId": "application",
          "businessCriticality": "Gold",
          "vertexType": "group",
          "groupTokens": [
              "namespace:acme"
          ],
          "correlatable": "true",
          "name": "acme-template",
          "entityTypes": [
              "completeGroup",
              "namespace"
          ],
          "tags": [
              "acme-template"
          ]
      }'
    else
      echo "  Recreate Template"
      curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$TEMPLATE_ID" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

      
      curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -d '  {
          "keyIndexName": "acme-template",
          "_correlationEnabled": "true",
          "iconId": "application",
          "businessCriticality": "Gold",
          "vertexType": "group",
          "groupTokens": [
              "namespace:acme"
          ],
          "correlatable": "true",
          "name": "acme-template",
          "entityTypes": [
              "completeGroup",
              "namespace"
          ],
          "tags": [
              "acme-template"
          ]
      }'

    fi

  
  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1



# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# TEMPLATES NETWORK
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - CREATE TOPOLOGY TEMPLATES NETWORK
  shell: |
    set -x
        
    echo "Create Custom Topology - Create Template"
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    oc create route passthrough topology-manage -n $WAIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
    export TOPO_MGT_ROUTE="https://"$(oc get route -n $WAIOPS_NAMESPACE topology-manage -o jsonpath={.spec.host})

 
    export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

    echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
    echo "    LOGIN: $LOGIN"

    export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Drobot-shop-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
    export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dnetwork-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)

    echo "    APP_ID: $APP_ID"
    echo "    TEMPLATE_ID: $TEMPLATE_ID"

    if [[ $TEMPLATE_ID == "" ]];
    then
      echo "  Create Template"
      curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -d '  {
        "keyIndexName": "network-template",
        "_correlationEnabled": "true",
        "iconId": "network",
        "vertexType": "group",
        "groupTokens": [
          "namespace:robot-shop"
        ],
        "correlatable": "true",
        "name": "network-template",
        "entityTypes": [
          "completeGroup",
          "network"
        ],
        "tags": [
          "network-template"
        ]
      }'
    else
      echo "  Recreate Template"
      curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$TEMPLATE_ID" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

      
      curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
      -u $LOGIN \
      -H 'Content-Type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -d ' {
        "keyIndexName": "network-template",
        "_correlationEnabled": "true",
        "iconId": "network",
        "vertexType": "group",
        "groupTokens": [
          "namespace:robot-shop"
        ],
        "correlatable": "true",
        "name": "network-template",
        "entityTypes": [
          "completeGroup",
          "network"
        ],
        "tags": [
          "network-template"
        ]
      }'

    fi

  
  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1
