
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Connection Details
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

- name: 🛰️  START - LOAD OVERLAY MERGE TOPOLOGY 
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"



- name: Log
  shell: |
    export MESSAGE="Load Robotshop overlay Topology"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - Load Robotshop overlay Topology'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  



# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# LOAD TOPOLOGY CONFIGURATION
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - LOAD TOPOLOGY CONFIGURATION
  shell: |
    set -x
    
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    export TOPO_MGT_ROUTE="https://"$(oc get route -n $WAIOPS_NAMESPACE topology-manage -o jsonpath={.spec.host})
    export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

    echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
    echo "    LOGIN: $LOGIN"

    # kubectl exec -ti -n $WAIOPS_NAMESPACE $(oc get po -n $WAIOPS_NAMESPACE|grep topology-topology|awk '{print$1}') -- /opt/ibm/graph.tools/bin/backup_ui_config -out backup.json
    # kubectl cp -n $WAIOPS_NAMESPACE $(oc get po -n $WAIOPS_NAMESPACE|grep topology-topology|awk '{print$1}'):/opt/ibm/netcool/asm/data/tools/backup.json ./backup.json
    # open ./backup.json



    echo "Delete existing Topology Customization"
    curl -XGET -k \
    "$TOPO_MGT_ROUTE/1.0/topology/metadata?_field=*" \
    -H 'accept: application/json' \
    -H 'content-type: application/json' \
    -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
    -u $LOGIN|jq -r '._items[] | select(.maxLabelLength=="")|._id'>/tmp/customItems.json

    cat /tmp/customItems.json

    while read line; 
    do 
      echo "DELETE: $line"
      curl -XDELETE -k \
      "$TOPO_MGT_ROUTE/1.0/topology/metadata/$line" \
      -H 'accept: application/json' \
      -H 'content-type: application/json' \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -u $LOGIN
    done < /tmp/customItems.json



    echo "Upload Topology Customization"
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    if [ "${OS}" == "darwin" ]; then
          echo "MAC"
          TOPOLOGY_CUSTOM_FILE=$(pwd)"/roles/cp4waiops-install-demo-content/templates/topology/asm_config.json"
    else
          TOPOLOGY_CUSTOM_FILE="{{role_path}}/templates/topology/asm_config.json"
    fi    
    kubectl cp $TOPOLOGY_CUSTOM_FILE -n $WAIOPS_NAMESPACE $(oc get po -n $WAIOPS_NAMESPACE|grep topology-topology|awk '{print$1}'):/opt/ibm/netcool/asm/data/tools/asm_config.json 
    
    sleep 30 

    echo "Import Topology Customization"
    #kubectl exec -ti -n $WAIOPS_NAMESPACE $(oc get po -n $WAIOPS_NAMESPACE|grep topology-topology|awk '{print$1}') -- find /opt/ibm/netcool/asm/data/tools/
    kubectl exec -ti -n $WAIOPS_NAMESPACE $(oc get po -n $WAIOPS_NAMESPACE|grep topology-topology|awk '{print$1}') -- /opt/ibm/graph.tools/bin/import_ui_config -file asm_config.json

  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1
  #when: PRINT_LOGINS == true






# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# APPLICATION ROBOT SHOP
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - COPY OVERLAY TOPOLOGY TO POD ROBOTSHOP
  shell: |
    set -x
    
    echo "Create Custom Topology - Copy Topology to File Observer"

    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    # Create Route
    oc create route reencrypt topology-file-api -n $WAIOPS_NAMESPACE --service=aiops-topology-file-observer --port=https-file-observer-api

    # Get FILE_OBSERVER_POD
    FILE_OBSERVER_POD=$(oc get po -n $WAIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')
    echo $FILE_OBSERVER_POD
    LOAD_FILE_NAME="robot-shop-file.txt"
    
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    if [ "${OS}" == "darwin" ]; then
          echo "MAC"
          FILE_OBSERVER_CAP=$(pwd)"/roles/cp4waiops-install-demo-content/templates/topology/$LOAD_FILE_NAME"
    else
          FILE_OBSERVER_CAP="{{role_path}}/templates/topology/$LOAD_FILE_NAME"
    fi    
    echo $FILE_OBSERVER_POD
    echo $FILE_OBSERVER_CAP
    echo $TARGET_FILE_PATH
    TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
    echo "  Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
    echo "oc cp -n $WAIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}"
    oc cp -n $WAIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}
  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1
  #when: PRINT_LOGINS == true



- name: 🚀 TOPOLOGY - CREATE OVERLAY TOPOLOGY ROBOTSHOP
  shell: |
    set -x
    
    echo "Create Custom Topology - Create File Observer Job"


    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    LOAD_FILE_NAME="robot-shop-file.txt"
    TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"

    # Create Route
    oc create route reencrypt topology-file-api -n $WAIOPS_NAMESPACE --service=aiops-topology-file-observer --port=https-file-observer-api

    # Get Credentials
    export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

    export TOPO_ROUTE="https://"$(oc get route -n $WAIOPS_NAMESPACE topology-file-api -o jsonpath={.spec.host})
    export JOB_ID=robot-shop-topology

    echo "  URL: $TOPO_ROUTE"
    echo "  LOGIN: $LOGIN"


    # Get FILE_OBSERVER JOB
    curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -u $LOGIN \
      -d "{
      \"unique_id\": \"${JOB_ID}\",
      \"description\": \"Automatically created by Nicks scripts\",
      \"parameters\": {
          \"file\": \"${TARGET_FILE_PATH}\"
          }
      }"


  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash
  
- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1




# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# APPLICATION SOCK SHOP
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - COPY OVERLAY TOPOLOGY TO POD SOCKSHOP
  shell: |
    set -x
    
    echo "Create Custom Topology - Copy Topology to File Observer"

    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    # Create Route
    oc create route reencrypt topology-file-api -n $WAIOPS_NAMESPACE --service=aiops-topology-file-observer --port=https-file-observer-api

    # Get FILE_OBSERVER_POD
    FILE_OBSERVER_POD=$(oc get po -n $WAIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')
    echo $FILE_OBSERVER_POD
    LOAD_FILE_NAME="sock-shop-file.txt"
    
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    if [ "${OS}" == "darwin" ]; then
          echo "MAC"
          FILE_OBSERVER_CAP=$(pwd)"/roles/cp4waiops-install-demo-content/templates/topology/$LOAD_FILE_NAME"
    else
          FILE_OBSERVER_CAP="{{role_path}}/templates/topology/$LOAD_FILE_NAME"
    fi    
    echo $FILE_OBSERVER_POD
    echo $FILE_OBSERVER_CAP
    echo $TARGET_FILE_PATH
    TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
    echo "  Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
    echo "oc cp -n $WAIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}"
    oc cp -n $WAIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}
  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1
  #when: PRINT_LOGINS == true



- name: 🚀 TOPOLOGY - CREATE OVERLAY TOPOLOGY SOCKSHOP
  shell: |
    set -x
    
    echo "Create Custom Topology - Create File Observer Job"


    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    LOAD_FILE_NAME="sock-shop-file.txt"
    TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"

    # Create Route
    oc create route reencrypt topology-file-api -n $WAIOPS_NAMESPACE --service=aiops-topology-file-observer --port=https-file-observer-api

    # Get Credentials
    export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

    export TOPO_ROUTE="https://"$(oc get route -n $WAIOPS_NAMESPACE topology-file-api -o jsonpath={.spec.host})
    export JOB_ID=sock-shop-topology

    echo "  URL: $TOPO_ROUTE"
    echo "  LOGIN: $LOGIN"


    # Get FILE_OBSERVER JOB
    curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -u $LOGIN \
      -d "{
      \"unique_id\": \"${JOB_ID}\",
      \"description\": \"Automatically created by Nicks scripts\",
      \"parameters\": {
          \"file\": \"${TARGET_FILE_PATH}\"
          }
      }"


  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash
  
- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1


# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# APPLICATION ACME AIR
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - COPY OVERLAY TOPOLOGY TO POD ACME
  shell: |
    set -x
    
    echo "Create Custom Topology - Copy Topology to File Observer"

    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    # Create Route
    oc create route reencrypt topology-file-api -n $WAIOPS_NAMESPACE --service=aiops-topology-file-observer --port=https-file-observer-api

    # Get FILE_OBSERVER_POD
    FILE_OBSERVER_POD=$(oc get po -n $WAIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')
    echo $FILE_OBSERVER_POD
    LOAD_FILE_NAME="acme-file.txt"
    
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    if [ "${OS}" == "darwin" ]; then
          echo "MAC"
          FILE_OBSERVER_CAP=$(pwd)"/roles/cp4waiops-install-demo-content/templates/topology/$LOAD_FILE_NAME"
    else
          FILE_OBSERVER_CAP="{{role_path}}/templates/topology/$LOAD_FILE_NAME"
    fi    
    TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
    echo $FILE_OBSERVER_POD
    echo $FILE_OBSERVER_CAP
    echo $TARGET_FILE_PATH
    echo "  Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
    echo "oc cp -n $WAIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}"
    oc cp -n $WAIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}
  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1
  #when: PRINT_LOGINS == true





- name: 🚀 TOPOLOGY - CREATE OVERLAY TOPOLOGY ACME
  shell: |
    set -x
    
    echo "Create Custom Topology - Create File Observer Job"


    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    LOAD_FILE_NAME="acme-file.txt"
    TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"

    # Create Route
    oc create route reencrypt topology-file-api -n $WAIOPS_NAMESPACE --service=aiops-topology-file-observer --port=https-file-observer-api

    # Get Credentials
    export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

    export TOPO_ROUTE="https://"$(oc get route -n $WAIOPS_NAMESPACE topology-file-api -o jsonpath={.spec.host})
    export JOB_ID=acme-topology

    echo "  URL: $TOPO_ROUTE"
    echo "  LOGIN: $LOGIN"


    # Get FILE_OBSERVER JOB
    curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -u $LOGIN \
      -d "{
      \"unique_id\": \"${JOB_ID}\",
      \"description\": \"Automatically created by Nicks scripts\",
      \"parameters\": {
          \"file\": \"${TARGET_FILE_PATH}\"
          }
      }"


  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash
  
- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1

