#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#         ________  __  ___     ___    ________       
#        /  _/ __ )/  |/  /    /   |  /  _/ __ \____  _____
#        / // __  / /|_/ /    / /| |  / // / / / __ \/ ___/
#      _/ // /_/ / /  / /    / ___ |_/ // /_/ / /_/ (__  ) 
#     /___/_____/_/  /_/    /_/  |_/___/\____/ .___/____/  
#                                           /_/
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------"
#  Installing CP4WAIOPS - Install Turbonomic Integration
#
#  CloudPak for Watson AIOps
#
#  ¬©2023 nikh@ch.ibm.com
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

apiVersion: v1                     
kind: Namespace
metadata:
  name: cp4waiops-installer
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cp4waiops-installer-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: default
    namespace: cp4waiops-installer
---
apiVersion: batch/v1
kind: Job
metadata:
  name: turbonomic-probe-install
  namespace: cp4waiops-installer
spec:
  serviceAccountname: cp4waiops-installer-admin
  template:
    metadata:
      labels:
        app: cp4waiops-installer

    spec:
      containers:
        - name: install
          image: quay.io/niklaushirt/cp4waiops-tools:2.0
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "64Mi"
              cpu: "150m"
            limits:
              memory: "2024Mi"
              cpu: "1200m"
          command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              #set -x


              TURBONOMIC_ADMIN_USER=administrator
              TURBONOMIC_ADMIN_PASSWORD=P4ssw0rd!




              clear

              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "  "
              echo "  üöÄ CloudPak for Watson AIOps  - Install Turbonomic Integration"
              echo "  "
              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "  "
              echo "  "

              #-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
              #-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
              #-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
              # EXAMINE INSTALLATION
              #-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
              echo "  --------------------------------------------------------------------------------------------------------------------------------------------"
              echo "  --------------------------------------------------------------------------------------------------------------------------------------------"
              echo "  üöÄ Initializing"
              echo "  --------------------------------------------------------------------------------------------------------------------------------------------"
              echo ""
              echo "    ------------------------------------------------------------------------------------------------------------------------------------------"
              echo "     üõ†Ô∏è  Get Namespaces"

              export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

              echo ""
              echo ""
              echo ""
              echo "  --------------------------------------------------------------------------------------------------------------------------------------------"
              echo "  --------------------------------------------------------------------------------------------------------------------------------------------"
              echo "  üöÄ Install Netcool Probe"
              echo "  --------------------------------------------------------------------------------------------------------------------------------------------"
              echo ""
              echo "    ------------------------------------------------------------------------------------------------------------------------------------------"
              echo "     üöÄ  Create Netcool Integration Operator"
              echo ""
              cat <<EOF | oc apply -n ${WAIOPS_NAMESPACE} -f -
              apiVersion: operators.coreos.com/v1alpha1
              kind: Subscription
              metadata:
                name: netcool-integrations-operator
                namespace: ${WAIOPS_NAMESPACE}
              spec:
                channel: v3.7
                installPlanApproval: Automatic
                name: netcool-integrations-operator
                source: ibm-operator-catalog
                sourceNamespace: openshift-marketplace
              EOF

              echo ""
              echo ""
              echo "    ------------------------------------------------------------------------------------------------------------------------------------------"
              echo "     üîé  Objectserver Details"
              echo ""

              IRC_INSTANCE=$(oc get issueresolutioncore -n $WAIOPS_NAMESPACE -o custom-columns=name:metadata.name --no-headers)

              IRC_PRIMARY_OBJECTSERVER_SVC=$IRC_INSTANCE-ir-core-ncoprimary
              IRC_BACKUP_OBJECTSERVER_SVC=$IRC_INSTANCE-ir-core-ncobackup
              IRC_PRIMARY_OBJECTSERVER_PORT=$(oc get svc -n $WAIOPS_NAMESPACE $IRC_PRIMARY_OBJECTSERVER_SVC -o jsonpath='{.spec.ports[?(@.name=="primary-tds-port")].port}')
              IRC_BACKUP_OBJECTSERVER_PORT=$(oc get svc -n $WAIOPS_NAMESPACE $IRC_BACKUP_OBJECTSERVER_SVC -o jsonpath='{.spec.ports[?(@.name=="backup-tds-port")].port}')
              IRC_OMNI_USERNAME=aiopsprobe
              IRC_OMNI_PASSWORD=$(oc get secret -n $WAIOPS_NAMESPACE $IRC_INSTANCE-ir-core-omni-secret -o jsonpath='{.data.OMNIBUS_PROBE_PASSWORD}' | base64 --decode && echo)


              echo "      IRC_INSTANCE:                   $IRC_INSTANCE"
              echo "      IRC_PRIMARY_OBJECTSERVER:       $IRC_PRIMARY_OBJECTSERVER_SVC:$IRC_PRIMARY_OBJECTSERVER_PORT"
              echo "      IRC_BACKUP_OBJECTSERVER:        $IRC_BACKUP_OBJECTSERVER_SVC:$IRC_BACKUP_OBJECTSERVER_PORT"
              echo "      User:                           $IRC_OMNI_USERNAME"
              echo "      Password:                       $IRC_OMNI_PASSWORD"




              echo ""
              echo ""
              echo "    ------------------------------------------------------------------------------------------------------------------------------------------"
              echo "     üîê  Create Secrets"
              echo ""

              oc extract secret/$IRC_INSTANCE-ir-core-ncoprimary-tls -n $WAIOPS_NAMESPACE --to=. --keys=tls.crt| sed 's/^/       /'

              #PROBE_OMNI_SECRET=noi-probe-secret oc create secret generic $PROBE_OMNI_SECRET --from-literal=AuthUserName=$IRC_OMNI_USERNAME --from-literal=AuthPassword=$IRC_OMNI_PASSWORD
              PROBE_OMNI_SECRET=noi-probe-secret 
              oc create secret generic -n $WAIOPS_NAMESPACE $PROBE_OMNI_SECRET --from-literal=AuthUserName=$IRC_OMNI_USERNAME --from-literal=AuthPassword=$IRC_OMNI_PASSWORD --from-file=tls.crt=tls.crt
              PROBE_AUTH_SECRET=turbonomic-probe-client-basic-auth
              oc create secret generic -n $WAIOPS_NAMESPACE $PROBE_AUTH_SECRET --from-literal=serverBasicAuthenticationUsername=admin  --from-literal=serverBasicAuthenticationPassword=P4ssw0rd!

              rm tls.crt

              echo ""
              echo ""
              echo "    ------------------------------------------------------------------------------------------------------------------------------------------"
              echo "     üöÄ  Create Network Policy"
              echo ""

              cat <<EOF | oc apply -n ${WAIOPS_NAMESPACE} -f -
              apiVersion: networking.k8s.io/v1
              kind: NetworkPolicy
              metadata:
                name: probe-allow-objectserver
                namespace: ${WAIOPS_NAMESPACE}
              spec:
                ingress:
                - from:
                  - namespaceSelector:
                      matchLabels:
                        kubernetes.io/metadata.name: noi-integrations
                  ports:
                    - protocol: TCP
                      port: 4100
                podSelector:
                  matchLabels:
                    app.kubernetes.io/instance: ${IRC_INSTANCE}
                    app.kubernetes.io/managed-by: ir-core-operator
                    app.kubernetes.io/name: IssueResolutionCore
                policyTypes:
                - Ingress
              EOF

              echo ""
              echo ""
              echo "    ------------------------------------------------------------------------------------------------------------------------------------------"
              echo "     üï¶  Wait for WebhookProbe CRD"
              echo ""
              while : ; do
                    READY=$(oc get WebhookProbe)
                    if [[ ! $READY  =~ "the server doesn't have a resource type" ]]; then
                          break
                        
                    else
                          echo "        CRD not ready yet. Waiting 10 seconds"
                          sleep 10
                    fi
              done
              echo "       ‚úÖ  OK: Probe ready"


              echo ""
              echo ""
              echo "    ------------------------------------------------------------------------------------------------------------------------------------------"
              echo "     üöÄ  Create Turbonomic Probe"
              echo ""
              PROBE_TURBONOMIC_INSTANCE=turbonomic-probe

              cat <<EOF | oc apply -n ${WAIOPS_NAMESPACE} -f -
              apiVersion: probes.integrations.noi.ibm.com/v1
              kind: WebhookProbe
              metadata:
                name: ${PROBE_TURBONOMIC_INSTANCE}
                labels:
                  app.kubernetes.io/name: ${PROBE_TURBONOMIC_INSTANCE}
                  app.kubernetes.io/managed-by: netcool-integrations-operator
                  app.kubernetes.io/instance: ${PROBE_TURBONOMIC_INSTANCE}
                namespace: ${WAIOPS_NAMESPACE}
              spec:
                helmValues:
                  global:
                    image:
                      secretName: 'ibm-entitlement-key'
                  netcool:
                    backupHost: '${IRC_BACKUP_OBJECTSERVER_SVC}.${WAIOPS_NAMESPACE}.svc'
                    backupPort: ${IRC_BACKUP_OBJECTSERVER_PORT}
                    backupServer: 'AGGB'
                    connectionMode: SSLAndAuth
                    primaryHost: '${IRC_PRIMARY_OBJECTSERVER_SVC}.${WAIOPS_NAMESPACE}.svc'
                    primaryPort: ${IRC_PRIMARY_OBJECTSERVER_PORT}
                    primaryServer: 'AGGP'
                    secretName: '${PROBE_OMNI_SECRET}'
                  probe:
                    jsonParserConfig:
                      notification:
                        jsonNestedHeader: ''
                        jsonNestedPayload: ''
                        messageDepth: 3
                        messageHeader: ''
                        messagePayload: json
                    integration: Turbonomic
                    enableTransportDebugLog: false
                    messageLevel: debug
                  ingress:
                    enabled: true
                    host: ''
                  arch: amd64
                  webhook:
                    uri: /probe/turbonomic
                    serverBasicAuthenticationCredentialsSecretName: '${PROBE_AUTH_SECRET}'
                    tls:
                      enabled: true
                      secretName: ''
                license:
                  accept: true
                version: 3.1.0
              EOF



              echo ""
              echo ""
              echo "    ------------------------------------------------------------------------------------------------------------------------------------------"
              echo "     üï¶  Wait for Turbonomic Probe"
              echo ""
              while : ; do
                    READY=$(oc get pods -n ${WAIOPS_NAMESPACE} -l app.kubernetes.io/instance=$PROBE_TURBONOMIC_INSTANCE|grep 1/1)
                    if [[  $READY  =~ "1/1" ]]; then
                          break
                        
                    else
                          echo "        Probe not ready yet. Waiting 10 seconds"
                          sleep 10
                    fi
              done
              echo "       ‚úÖ  OK: Probe ready"



              echo ""
              echo ""
              echo "    ------------------------------------------------------------------------------------------------------------------------------------------"
              echo "     üï¶  Get Turbonomic Probe Details"
              echo ""
              PROBE_HOSTNAME=$(oc get route -n ${WAIOPS_NAMESPACE} $PROBE_TURBONOMIC_INSTANCE-mb-webhook -o jsonpath='{.spec.host}')
              PROBE_URI=$(oc get route -n ${WAIOPS_NAMESPACE} $PROBE_TURBONOMIC_INSTANCE-mb-webhook -o jsonpath='{.spec.path}')
              PROBE_TURBO_WEBHOOK_URL=https://$PROBE_HOSTNAME$PROBE_URI

              TURBONOMIC_HOSTNAME=$(oc get route -n turbonomic nginx -o jsonpath={.spec.host})
              BASIC_AUTH_USERNAME=admin
              BASIC_AUTH_PASSWORD=P4ssw0rd!

              echo "      PROBE_TURBO_WEBHOOK_URL:         $PROBE_TURBO_WEBHOOK_URL"
              echo "      TURBONOMIC_HOSTNAME:             $TURBONOMIC_HOSTNAME"
              echo "      TURBONOMIC_ADMIN_USER:           $TURBONOMIC_ADMIN_USER"
              echo "      TURBONOMIC_ADMIN_PASSWORD:       $TURBONOMIC_ADMIN_PASSWORD"
              echo "      BASIC_AUTH_USERNAME:             $BASIC_AUTH_USERNAME"
              echo "      BASIC_AUTH_PASSWORD:             $BASIC_AUTH_PASSWORD"


              echo ""
              echo ""
              echo ""
              echo "  --------------------------------------------------------------------------------------------------------------------------------------------"
              echo "  --------------------------------------------------------------------------------------------------------------------------------------------"
              echo "  üöÄ Create Turbonomic Workflow "
              echo "  --------------------------------------------------------------------------------------------------------------------------------------------"
              echo ""


              JSESSIONID=$(curl --silent --cookie-jar - --insecure "https://${TURBONOMIC_HOSTNAME}/vmturbo/rest/login" --data "username=${TURBONOMIC_ADMIN_USER}&password=${TURBONOMIC_ADMIN_PASSWORD}" | awk '/JSESSIONID/{print $7}')

              if [[  $JSESSIONID  == "" ]]; then
                echo ""
                echo "Could not get Token for Turbonomic. Are you sure that you have Turbonomic installed and configured?"
                echo "Check your installation here https://$TURBONOMIC_HOSTNAME"
                echo "‚ùå Aborting...."
                exit 1
              else
                echo "      üîê JSESSIONID:                    $JSESSIONID"
                echo ""
              fi



              result=$(curl \
                  "https://$TURBONOMIC_HOSTNAME/api/v3/workflows" \
                  --silent --insecure \
                  --compressed \
                  --header 'Accept: application/json' \
                  --header 'Content-Type: application/json' \
                  --header "cookie: JSESSIONID=$JSESSIONID" \
                  --request POST \
                  --data '
                  {
              "displayName": "CP4WAIOps",
              "className": "Workflow",
              "description": "CP4WAIOps Webhook",
                      "discoveredBy":
                      {
                          "readonly": false
                      },
                    "type": "WEBHOOK",
                    "typeSpecificDetails": {
                        "url": "'${PROBE_TURBO_WEBHOOK_URL}'",
                        "method": "POST",
              "authenticationMethod": "BASIC",
              "username": "'${BASIC_AUTH_USERNAME}'",
              "password": "'${BASIC_AUTH_PASSWORD}'",
              "template": "$converter.toJson($action)",
              "trustSelfSignedCertificates": true,
              "headers": [
                  {
                  "name": "Content-type",
                  "value": "application/json"
                  }
                ],
              "type": "WebhookApiDTO"
                    }
                  }
                  ')

              #echo $result

              if [[  $result  =~ "CP4WAIOps Webhook" ]]; then
                echo ""
                echo "      ‚úÖ Turbonomic Workflow created successfully"
              else
                echo ""
                echo "      ‚ùó Turbonomic Workflow already exists"
              fi


              echo ""
              echo ""
              echo "    ------------------------------------------------------------------------------------------------------------------------------------------"
              echo "     üîé  Installed Turbonomic Workflows"
              echo ""

              result=$(curl "https://$TURBONOMIC_HOSTNAME/api/v3/workflows" --silent --insecure --compressed --header 'Accept: application/json' --header 'Content-Type: application/json' --header "cookie: JSESSIONID=$JSESSIONID" --request GET)
              echo $result|jq| sed 's/^/       /'

              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "  "
              echo "  ‚úÖ DONE - CloudPak for Watson AIOps  - Install Turbonomic Integration"
              echo "  "
              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"



              while true
              do
                sleep 1000
              done

          env:
          - name: INSTALL_REPO
            value : "https://github.com/niklaushirt/cp4waiops-deployer.git"
          - name: CONFIG
            #value : "./configs/cp4waiops-all-34.yaml"
            value : "./configs/cp4waiops-all-latest.yaml"
          - name: ENTITLED_REGISTRY_KEY
            value : "eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQk0gTWFya2V0cGxhY2UiLCJpYXQiOjE1Nzg0NzQzMjgsImp0aSI6IjRjYTM3ODkwMzExNjQxZDdiMDJhMjRmMGMxMWMwYmZhIn0.Z-rqfSLJA-R-ow__tI3RmLx4m9EH-abvdc53DYEkbYY"
      restartPolicy: Never
  backoffLimit: 4
