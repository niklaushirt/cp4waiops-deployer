#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#         ________  __  ___     ___    ________       
#        /  _/ __ )/  |/  /    /   |  /  _/ __ \____  _____
#        / // __  / /|_/ /    / /| |  / // / / / __ \/ ___/
#      _/ // /_/ / /  / /    / ___ |_/ // /_/ / /_/ (__  ) 
#     /___/_____/_/  /_/    /_/  |_/___/\____/ .___/____/  
#                                           /_/
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------"
#  Installing CP4WAIOPS
#
#  CloudPak for Watson AIOps
#
#  ¬©2023 nikh@ch.ibm.com
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Check CP4WAIOPS Installation
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

apiVersion: v1                     
kind: Namespace
metadata:
  name: cp4waiops-installer
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cp4waiops-installer-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: default
    namespace: cp4waiops-installer
---
apiVersion: batch/v1
kind: Job
metadata:
  name: cp4waiops-check-install
  namespace: cp4waiops-installer
spec:
  serviceAccountname: cp4waiops-installer-admin
  template:
    metadata:
      labels:
        app: cp4waiops-installer

    spec:
      containers:
        - name: install
          image: quay.io/niklaushirt/cp4waiops-tools:2.0
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "64Mi"
              cpu: "150m"
            limits:
              memory: "2024Mi"
              cpu: "1200m"
          command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              #set -x

                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  #      ________  __  ___     ___    ________       
                  #     /  _/ __ )/  |/  /    /   |  /  _/ __ \____  _____
                  #     / // __  / /|_/ /    / /| |  / // / / / __ \/ ___/
                  #   _/ // /_/ / /  / /    / ___ |_/ // /_/ / /_/ (__  ) 
                  #  /___/_____/_/  /_/    /_/  |_/___/\____/ .___/____/  
                  #                                        /_/        
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  #---------------------------------------------------------------------------------------------------------------------------------------------------"
                  #  CP4WAIOPS  - Debug WAIOPS Installation
                  #
                  #
                  #  ¬©2023 nikh@ch.ibm.com
                  # ---------------------------------------------------------------------------------------------------------------------------------------------------"
                  # ---------------------------------------------------------------------------------------------------------------------------------------------------"
                  # ---------------------------------------------------------------------------------------------------------------------------------------------------"
                  # ---------------------------------------------------------------------------------------------------------------------------------------------------"
                  clear

                  echo "***************************************************************************************************************************************************"
                  echo "***************************************************************************************************************************************************"
                  echo "***************************************************************************************************************************************************"
                  echo "***************************************************************************************************************************************************"
                  echo "  "
                  echo "  üöÄ CloudPak for Watson AIOps  - Check WAIOPS Installation"
                  echo "  "
                  echo "***************************************************************************************************************************************************"
                  echo "***************************************************************************************************************************************************"
                  echo "***************************************************************************************************************************************************"
                  echo "  "
                  echo "  "


                  export TEMP_PATH=~/aiops-install
                  export ERROR_STRING=""
                  export ERROR=false








                  if [[ $result =~ " already exists" ]];
                  then
                        export PROJECT_ID=$(curl -X "GET" -s "{{ AWX_URL }}/api/v2/projects/" -u "admin:{{ AWX_PWD }}" --insecure|jq -c '.results[]| select( .name == "CP4WAIOPS Runbooks")|.id')
                  else
                        export PROJECT_ID=$(echo $result|jq ".id")
                  fi







                  # ---------------------------------------------------------------------------------------------------------------------------------------------------"
                  # ---------------------------------------------------------------------------------------------------------------------------------------------------"
                  # Do Not Edit Below
                  # ---------------------------------------------------------------------------------------------------------------------------------------------------"
                  # ---------------------------------------------------------------------------------------------------------------------------------------------------"
                  function handleError(){
                  if  ([[ $CURRENT_ERROR == true ]]); 
                  then
                        ERROR=true
                        ERROR_STRING=$ERROR_STRING"\n‚≠ï $CURRENT_ERROR_STRING"
                        echo "      "
                        echo "      "
                        echo "      ‚ùó***************************************************************************************************************************************************"
                        echo "      ‚ùó***************************************************************************************************************************************************"
                        echo "      ‚ùó  ‚ùå The following error was found: "
                        echo "      ‚ùó"
                        echo "      ‚ùó      ‚≠ï $CURRENT_ERROR_STRING"; 
                        echo "      ‚ùó"
                        echo "      ‚ùó***************************************************************************************************************************************************"
                        echo "      ‚ùó***************************************************************************************************************************************************"
                        echo "      "
                        echo "      "

                  fi
                  }



                  function check_array_crd(){

                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------"
                        echo "    üîé Check $CHECK_NAME"
                        echo "    --------------------------------------------------------------------------------------------"

                        for ELEMENT in ${CHECK_ARRAY[@]}; do
                              ELEMENT_NAME=${ELEMENT##*/}
                              ELEMENT_TYPE=${ELEMENT%%/*}
                        echo "   Check $ELEMENT_NAME ($ELEMENT_TYPE) ..."

                              ELEMENT_OK=$(oc get $ELEMENT -n $WAIOPS_NAMESPACE | grep "AGE" || true) 

                              if  ([[ ! $ELEMENT_OK =~ "AGE" ]]); 
                              then 
                                    echo "      ‚≠ï $ELEMENT not present"; 
                                    echo ""
                              else
                                    echo "      ‚úÖ OK: $ELEMENT"; 

                              fi
                        done
                        export CHECK_NAME=""
                  }

                  function check_array(){

                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------"
                        echo "    üîé Check $CHECK_NAME"
                        echo "    --------------------------------------------------------------------------------------------"

                        for ELEMENT in ${CHECK_ARRAY[@]}; do
                              ELEMENT_NAME=${ELEMENT##*/}
                              ELEMENT_TYPE=${ELEMENT%%/*}
                        echo "   Check $ELEMENT_NAME ($ELEMENT_TYPE) ..."

                              ELEMENT_OK=$(oc get $ELEMENT -n $WAIOPS_NAMESPACE | grep $ELEMENT_NAME || true) 

                              if  ([[ ! $ELEMENT_OK =~ "$ELEMENT_NAME" ]]); 
                              then 
                                    echo "      ‚≠ï $ELEMENT not present"; 
                                    echo ""
                              else
                                    echo "      ‚úÖ OK: $ELEMENT"; 

                              fi
                        done
                        export CHECK_NAME=""
                  }











































                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  # EXAMINE INSTALLATION
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  echo "*************************************************************************************************************************************"
                  echo " üöÄ  Examining CP4WAIOPS CP4WAIOps Configuration...." 
                  echo "*************************************************************************************************************************************"
                        echo ""
                        echo "  ------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "  ------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "  üöÄ Initializing"
                        echo "  ------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo ""
                        echo "    ------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "   üõ†Ô∏è  Get Namespaces"

                        export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

                        echo ""
                        echo "    ------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "   üõ†Ô∏è  Get Cluster Route"

                        CLUSTER_ROUTE=$(oc get routes console -n openshift-console | tail -n 1 2>&1 ) 
                        CLUSTER_FQDN=$( echo $CLUSTER_ROUTE | awk '{print $2}')
                        CLUSTER_NAME=${CLUSTER_FQDN##*console.}



                        echo ""
                        echo "    ------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "   üõ†Ô∏è  Get API Route"
                        oc create route passthrough ai-platform-api -n $WAIOPS_NAMESPACE  --service=aimanager-aio-ai-platform-api-server --port=4000 --insecure-policy=Redirect --wildcard-policy=None>/dev/null 2>/dev/null
                        export ROUTE=$(oc get route -n $WAIOPS_NAMESPACE ai-platform-api  -o jsonpath={.spec.host})
                        echo "        Route: $ROUTE"
                        echo ""
                        echo ""
                        echo "    ------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "   üõ†Ô∏è  Getting ZEN Token"
                  
                        ZEN_API_HOST=$(oc get route -n $WAIOPS_NAMESPACE cpd -o jsonpath='{.spec.host}')
                        ZEN_LOGIN_URL="https://${ZEN_API_HOST}/v1/preauth/signin"
                        LOGIN_USER=admin
                        LOGIN_PASSWORD="$(oc get secret admin-user-details -n $WAIOPS_NAMESPACE -o jsonpath='{ .data.initial_admin_password }' | base64 --decode)"

                        ZEN_LOGIN_RESPONSE=$(
                        curl -k \
                        -H 'Content-Type: application/json' \
                        -XPOST \
                        "${ZEN_LOGIN_URL}" \
                        -d '{
                              "username": "'"${LOGIN_USER}"'",
                              "password": "'"${LOGIN_PASSWORD}"'"
                        }' 2> /dev/null
                        )

                        ZEN_LOGIN_MESSAGE=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .message)

                        if [ "${ZEN_LOGIN_MESSAGE}" != "success" ]; then
                              echo "Login failed: ${ZEN_LOGIN_MESSAGE}"
                              exit 2
                        fi

                        ZEN_TOKEN=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .token)
                        #echo "${ZEN_TOKEN}"
                        echo "        ‚úÖ Sucessfully logged in" 

                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "   üöÄ  CHECK CP4WAIOPS CP4WAIOps Installation...." 
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "    üîé Installed Openshift Operator Versions"
                        echo ""
                        oc get -n $WAIOPS_NAMESPACE ClusterServiceVersion | sed 's/^/       /'
                        echo ""








                  checkNamespace () {
                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------"
                        echo "    üîé Pods not ready in Namespace $CURRENT_NAMESPACE"
                        echo ""

                        export ERROR_PODS=$(oc get pods -n $CURRENT_NAMESPACE | grep -v "Completed" | grep "0/"|awk '{print$1}')
                        export ERROR_PODS_COUNT=$(oc get pods -n $CURRENT_NAMESPACE | grep -v "Completed" | grep "0/"| grep -c "")
                        if  ([[ $ERROR_PODS_COUNT -gt 0 ]]); 
                        then 
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="$ERROR_PODS_COUNT Pods not running in Namespace "$CURRENT_NAMESPACE"  \n"$ERROR_PODS
                              handleError
                        else  
                              echo "      ‚úÖ OK: All Pods running and ready in Namespace $CURRENT_NAMESPACE"; 
                        fi
                  }



                        export CURRENT_NAMESPACE=ibm-common-services
                        checkNamespace

                        export CURRENT_NAMESPACE=$WAIOPS_NAMESPACE
                        checkNamespace


                        export CURRENT_NAMESPACE=awx
                        checkNamespace

                        export CURRENT_NAMESPACE=turbonomic
                        checkNamespace

                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------"
                        echo "    üîé Pods with Image Pull Errors in Namespace $WAIOPS_NAMESPACE"
                        echo ""

                        export IMG_PULL_ERROR=$(oc get pods -n $WAIOPS_NAMESPACE | grep "ImagePull")

                        if  ([[ ! $IMG_PULL_ERROR == "" ]]); 
                        then 
                              echo "      ‚≠ï There are Image Pull Errors:"; 
                              echo "$IMG_PULL_ERROR"
                              echo ""
                              echo ""

                              echo "      üîé Check your Pull Secrets:"; 
                              echo ""
                              echo ""
                              echo "ibm-entitlement-key Pull Secret"
                              oc get secret/ibm-entitlement-key -n $WAIOPS_NAMESPACE --template='{{index .data ".dockerconfigjson" | base64decode}}'

                              echo ""
                              echo ""
                              echo "ibm-entitlement-key Pull Secret"
                              oc get secret/ibm-entitlement-key -n $WAIOPS_NAMESPACE --template='{{index .data ".dockerconfigjson" | base64decode}}'

                        else
                              echo "      ‚úÖ OK: All images can be pulled"; 
                        fi




                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------"
                        echo "    üîé Check ZEN Operator"
                        echo ""

                        export ZEN_LOGS=$(oc logs $(oc get po -n ibm-common-services|grep ibm-zen-operator|awk '{print$1}') -n ibm-common-services)
                        export ZEN_ERRORS=$(echo $ZEN_LOGS|grep -i error)
                        export ZEN_FAILED=$(echo $ZEN_LOGS|grep -i "failed=0")
                        export ZEN_READY=$(echo $ZEN_LOGS|grep -i "ok=2")

                        if  ([[ $ZEN_FAILED == "" ]]); 
                        then 
                              echo "$ZEN_ERRORS"
                              echo ""
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="Zen has errors"
                              handleError
                  
                        else
                              echo "      ‚úÖ OK: ZEN Operator has run successfully"; 
                        fi
                        




                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------"
                        echo "    üîé Check Topology"
                        echo ""

                        CP4AIOPS_CHECK_LIST=(
                        "aiops-topology-file-observer"
                        "aiops-topology-kubernetes-observer"
                        "aiops-topology-layout"
                        "aiops-topology-merge"
                        "aiops-topology-observer-service"
                        "aiops-topology-rest-observer"
                        "aiops-topology-search"
                        "aiops-topology-servicenow-observer"
                        "aiops-topology-status"
                        "aiops-topology-topology"
                        "aiops-topology-ui-api"
                        "aiops-topology-vmvcenter-observer")
                        for ELEMENT in ${CP4AIOPS_CHECK_LIST[@]}; do
                        #echo "     Check $ELEMENT.."
                              ELEMENT_OK=$(oc get pod -n $WAIOPS_NAMESPACE --ignore-not-found | grep $ELEMENT || true) 
                              if  ([[ ! $ELEMENT_OK =~ "1/1" ]]); 
                              then 
                              echo "      ‚≠ï Pod $ELEMENT not running successfully"; 
                              echo ""
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="Pod $ELEMENT not runing successfully"
                              handleError
                              else
                                    echo "      ‚úÖ OK: Pod $ELEMENT"; 

                              fi

                        done





                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------"
                        echo "    üîé Check Data Stores"
                        echo ""

                        CP4AIOPS_CHECK_LIST=(
                        "aimanager-aio-luigi-daemon-0"
                        "aimanager-ibm-minio-0"
                        "aiops-topology-cassandra-0"
                        "c-example-couchdbcluster-m-0"
                        "c-example-redis-m-0"
                        "c-example-redis-m-1"
                        "c-example-redis-m-2"
                        "c-example-redis-s-0"
                        "c-example-redis-s-1"
                        "c-example-redis-s-2"
                        "cp4waiops-postgres-keeper-0"
                        "iaf-system-kafka-0"
                        "iaf-system-zookeeper-0"
                        "ibm-cp-watson-aiops-edb-postgres-1"
                        "ibm-vault-deploy-consul-0"
                        "ibm-vault-deploy-vault-0"
                        "sre-tunnel-controller-0"
                        "zen-metastoredb-0"
                        "zen-metastoredb-1"
                        "zen-metastoredb-2")
                        for ELEMENT in ${CP4AIOPS_CHECK_LIST[@]}; do
                        #echo "     Check $ELEMENT.."
                              ELEMENT_OK=$(oc get pod -n $WAIOPS_NAMESPACE --ignore-not-found | grep $ELEMENT || true) 
                              if  ([[ ! $ELEMENT_OK =~ "0/" ]]); 
                              then
                              echo "      ‚úÖ OK: Pod $ELEMENT";  
                              else
                                    
                              echo "      ‚≠ï Pod $ELEMENT not running successfully"; 
                              echo ""
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="Pod $ELEMENT not runing successfully"
                              handleError

                              fi

                        done








                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------"
                        echo "    üîé Check AIO"
                        echo ""

                        CP4AIOPS_CHECK_LIST=(
                        "aimanager-aio-ai-platform-api-server"
                        "aimanager-aio-change-risk"
                        "aimanager-aio-chatops-orchestrator"
                        "aimanager-aio-chatops-slack-integrator"
                        "aimanager-aio-chatops-teams-integrator"
                        "aimanager-aio-controller"
                        "aimanager-aio-cr-api"
                        "aimanager-aio-log-anomaly-detector"
                        "aimanager-aio-luigi-daemon-0"
                        "aimanager-aio-oob-recommended-actions"
                        "aimanager-aio-similar-incidents-service"
                        "aimanager-ibm-minio-0")
                        for ELEMENT in ${CP4AIOPS_CHECK_LIST[@]}; do
                        #echo "     Check $ELEMENT.."
                              ELEMENT_OK=$(oc get pod -n $WAIOPS_NAMESPACE --ignore-not-found | grep $ELEMENT || true) 
                              if  ([[ ! $ELEMENT_OK =~ "1/1" ]]); 
                              then 
                              echo "      ‚≠ï Pod $ELEMENT not running successfully"; 
                              echo ""
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="Pod $ELEMENT not runing successfully"
                              handleError
                              else
                                    echo "      ‚úÖ OK: Pod $ELEMENT"; 

                              fi

                        done






                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------"
                        echo "    üîé Check IR"
                        echo ""

                        CP4AIOPS_CHECK_LIST=(
                        "aiops-ir-analytics-classifier"
                        "aiops-ir-analytics-metric-action"
                        "aiops-ir-analytics-metric-api"
                        "aiops-ir-analytics-metric-spark"
                        "aiops-ir-analytics-probablecause"
                        "aiops-ir-analytics-spark-master"
                        "aiops-ir-analytics-spark-pipeline-composer"
                        "aiops-ir-analytics-spark-worker"
                        "aiops-ir-analytics-spark-worker"
                        "aiops-ir-core-archiving"
                        "aiops-ir-core-cem-users"
                        "aiops-ir-core-datarouting"
                        "aiops-ir-core-esarchiving"
                        "aiops-ir-core"
                        "aiops-ir-core-ncodl-api"
                        "aiops-ir-core-ncodl-if"
                        "aiops-ir-core-ncodl-jobmgr"
                        "aiops-ir-core-ncodl-std"
                        "aiops-ir-core-ncodl-std"
                        "aiops-ir-core"
                        "aiops-ir-core-rba-as"
                        "aiops-ir-core-rba-rbs"
                        "aiops-ir-core-usercfg"
                        "aiops-ir-lifecycle-datarouting"
                        "aiops-ir-lifecycle-eventprocessor-ep"
                        "aiops-ir-lifecycle-eventprocessor-ep"
                        "aiops-ir-lifecycle-policy-grpc-svc"
                        "aiops-ir-lifecycle-policy-registry-svc"
                        "aiops-ir-ui-api-graphql")
                        for ELEMENT in ${CP4AIOPS_CHECK_LIST[@]}; do
                        #echo "     Check $ELEMENT.."
                              ELEMENT_OK=$(oc get pod -n $WAIOPS_NAMESPACE --ignore-not-found | grep $ELEMENT || true) 
                              if  ([[ ! $ELEMENT_OK =~ "1/1" ]]); 
                              then 
                              echo "      ‚≠ï Pod $ELEMENT not running successfully"; 
                              echo ""
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="Pod $ELEMENT not runing successfully"
                              handleError
                              else
                                    echo "      ‚úÖ OK: Pod $ELEMENT"; 

                              fi

                        done





                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------"
                        echo "    üîé Check Routes"
                        echo ""
                        ROUTE_OK=$(oc get route job-manager -n $WAIOPS_NAMESPACE || true) 
                        if  ([[ ! $ROUTE_OK =~ "job-manager" ]]); 
                        then 
                        echo "      ‚≠ï job-manager Route does not exist"; 
                        echo "      ‚≠ï (You may want to run option: 12  - Recreate custom Routes)";  
                        echo ""
                        export CURRENT_ERROR=true
                        export CURRENT_ERROR_STRING="job-manager Route does not exist"
                        handleError
                        else
                        echo "      ‚úÖ OK: job-manager Route exists"; 
                        fi

                  




                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  # EXAMINE TRAINING
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "  üöÄ CHECK Trained Models"
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo ""


                        echo ""
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "     üì•  LAD"
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        export result=$(curl "https://$ROUTE/graphql" -k -s -H "authorization: Bearer $ZEN_TOKEN" -H 'Accept-Encoding: gzip, deflate, br' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Connection: keep-alive' -H 'DNT: 1' -H 'Origin: https://ai-platform-api-cp4waiops.itzroks-270003bu3k-qd899z-6ccd7f378ae819553d37d5f2ee142bd6-0000.eu-de.containers.appdomain.cloud' --data-binary '{"query":"query {\n    getTrainingDefinitions(algorithmName:\"Log_Anomaly_Detection\") {\n      definitionName\n      algorithmName\n      version\n      deployedVersion\n      description\n      createdBy\n      modelDeploymentDate\n      trainedModels(latest: true) {\n        modelStatus\n        trainingStartTimestamp\n        trainingEndTimestamp\n        precheckTrainingDetails {\n          dataQuality\n          dataQualityDetails {\n            report\n            languageInfo {\n              language\n            }\n          }\n        }\n        postcheckTrainingDetails {\n          aiCoverage\n          overallModelQuality\n          modelsCreatedList {\n            modelId\n          }\n        }\n      }\n    }\n  }"}' --compressed)
                        #echo $result| jq ".data.getTrainingDefinitions[].definitionName,.data.getTrainingDefinitions[].deployedVersion, .data.getTrainingDefinitions[].trainedModels.precheckTrainingDetails.dataQuality, .data.getTrainingDefinitions[].trainedModels.precheckTrainingDetails.dataQuality.dataQualityDetails.report, .data.getTrainingDefinitions[].trainedModels.postcheckTrainingDetails    , .data.getTrainingDefinitions[].postcheckTrainingDetails.aiCoverage"
                        echo "      Name:          "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".definitionName")
                        echo "      Deployed:      "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".deployedVersion")
                        echo "      Latest:        "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".version")
                        echo "      Data Quality:  "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainedModels[].precheckTrainingDetails.dataQuality")" - " $(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainedModels[].precheckTrainingDetails.dataQualityDetails.report[0]")
                        echo "      AI Coverage:   "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainedModels[].postcheckTrainingDetails.aiCoverage")
                        echo "      Models:        "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainedModels[].postcheckTrainingDetails.modelsCreatedList")
                        echo "      Deployed:      "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".modelDeploymentDate")
                        #echo $result| jq 
                        if  ([[ $(echo $result| jq ".data.getTrainingDefinitions[]") == '' ]]); 
                        then 
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="LogAnomalies not trained"
                              handleError
                        fi

                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "     üì•  METRIC ANOMALIES"
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        export result=$(curl "https://$ROUTE/graphql" -k -s -H "authorization: Bearer $ZEN_TOKEN" -H 'Accept-Encoding: gzip, deflate, br' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Connection: keep-alive' -H 'DNT: 1' -H 'Origin: https://ai-platform-api-cp4waiops.itzroks-270003bu3k-qd899z-6ccd7f378ae819553d37d5f2ee142bd6-0000.eu-de.containers.appdomain.cloud' --data-binary '{"query":"  query {\n    getTrainingDefinitions (algorithmName:\"Metric_Anomaly_Detection\"){\n      definitionName\n      algorithmName\n      description\n      version\n      deployedVersion\n      lastTraining\n      trainingSchedule {\n        frequency\n        repeat\n        noEndDate\n      }\n      trainedModels(latest: true) {\n        trainingStartTimestamp\n        trainingEndTimestamp\n        modelStatus\n        postcheckTrainingDetails {\n            aiCoverage\n          \n          }\n      }\n    }\n  }"}' --compressed)
                        echo "      Name:          "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".definitionName")
                        echo "      Deployed:      "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".deployedVersion")
                        echo "      Latest:        "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".version")
                        echo "      Schedule:      "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainingSchedule.frequency")" - " $(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainingSchedule.repeat")
                        echo "      Status:        "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainedModels[].modelStatus")
                        #echo $result| jq 
                        if  ([[ $(echo $result| jq ".data.getTrainingDefinitions[]") == '' ]]); 
                        then 
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="MetricAnomalies not trained"
                              handleError
                        fi

                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "     üì•  TEMPORAL GROUPING"
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        export result=$(curl "https://$ROUTE/graphql" -k -s -H "authorization: Bearer $ZEN_TOKEN" -H 'Accept-Encoding: gzip, deflate, br' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Connection: keep-alive' -H 'DNT: 1' -H 'Origin: https://ai-platform-api-cp4waiops.itzroks-270003bu3k-qd899z-6ccd7f378ae819553d37d5f2ee142bd6-0000.eu-de.containers.appdomain.cloud' --data-binary '{"query":"query {\n    getTrainingDefinitions(algorithmName:\"Temporal_Grouping\") {\n      definitionName\n      algorithmName\n      version\n      deployedVersion\n      description\n      createdBy\n      modelDeploymentDate\n      trainedModels(latest: true) {\n        modelStatus\n        trainingStartTimestamp\n        trainingEndTimestamp\n        postcheckTrainingDetails {\n          modelsCreatedList {\n            modelId\n          }\n        }\n      }\n    }\n  }"}' --compressed)
                        echo "      Name:          "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".definitionName")
                        echo "      Deployed:      "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".deployedVersion")
                        echo "      Latest:        "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".version")      
                        echo "      AI Coverage:   "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainedModels[].postcheckTrainingDetails.modelsCreatedList")
                        echo "      Deployed:      "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".modelDeploymentDate")
                        #echo $result| jq 
                        if  ([[ $(echo $result| jq ".data.getTrainingDefinitions[]") == '' ]]); 
                        then 
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="TemporalGrouping not trained"
                              handleError
                        fi

                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "     üì•  SIMILAR INCIDENTS"
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        export result=$(curl "https://$ROUTE/graphql" -k -s -H "authorization: Bearer $ZEN_TOKEN" -H 'Accept-Encoding: gzip, deflate, br' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Connection: keep-alive' -H 'DNT: 1' -H 'Origin: https://ai-platform-api-cp4waiops.itzroks-270003bu3k-qd899z-6ccd7f378ae819553d37d5f2ee142bd6-0000.eu-de.containers.appdomain.cloud' --data-binary '{"query":"  query {\n    getTrainingDefinitions (algorithmName:\"Similar_Incidents\"){\n      definitionName\n      algorithmName\n      description\n      version\n      deployedVersion\n      lastTraining\n      trainingSchedule {\n        frequency\n        repeat\n        noEndDate\n      }\n      trainedModels(latest: true) {\n        trainingStartTimestamp\n        trainingEndTimestamp\n        modelStatus\n        postcheckTrainingDetails {\n            aiCoverage\n          \n          }\n      }\n    }\n  }"}' --compressed)
                        echo "      Name:          "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".definitionName")
                        echo "      Deployed:      "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".deployedVersion")
                        echo "      Latest:        "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".version")      
                        echo "      Schedule:      "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainingSchedule.frequency")" - " $(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainingSchedule.repeat")
                        echo "      AI Coverage:   "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainedModels[].postcheckTrainingDetails.aiCoverage")
                        #echo $result| jq 
                        if  ([[ $(echo $result| jq ".data.getTrainingDefinitions[]") == '' ]]); 
                        then 
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="SimilarIncidents not trained"
                              handleError
                        fi
                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "     üì•  CHANGE RISK"
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        export result=$(curl "https://$ROUTE/graphql" -k -s -H "authorization: Bearer $ZEN_TOKEN" -H 'Accept-Encoding: gzip, deflate, br' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Connection: keep-alive' -H 'DNT: 1' -H 'Origin: https://ai-platform-api-cp4waiops.itzroks-270003bu3k-qd899z-6ccd7f378ae819553d37d5f2ee142bd6-0000.eu-de.containers.appdomain.cloud' --data-binary '{"query":"  query {\n    getTrainingDefinitions (algorithmName:\"Change_Risk\"){\n      definitionName\n      algorithmName\n      description\n      version\n      deployedVersion\n      lastTraining\n      trainingSchedule {\n        frequency\n        repeat\n        noEndDate\n      }\n      trainedModels(latest: true) {\n        trainingStartTimestamp\n        trainingEndTimestamp\n        modelStatus\n        postcheckTrainingDetails {\n            aiCoverage\n          \n          }\n      }\n    }\n  }"}' --compressed)
                        echo "      Name:          "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".definitionName")
                        echo "      Deployed:      "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".deployedVersion")
                        echo "      Latest:        "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".version")
                        echo "      Schedule:      "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainingSchedule.frequency")" - " $(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainingSchedule.repeat")
                        echo "      AI Coverage:   "$(echo $result| jq ".data.getTrainingDefinitions[]" | jq -r ".trainedModels[].postcheckTrainingDetails.aiCoverage")
                        #echo $result 
                        if  ([[ $(echo $result| jq ".data.getTrainingDefinitions[]") == '' ]]); 
                        then 
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="ChangeRisk not trained"
                              handleError
                        fi








                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  # EXAMINE AWX
                  #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "  üöÄ CHECK Runbooks"
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo ""

                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "    üîé CHECK AWX Configuration"
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"

                  export AWX_ROUTE=$(oc get route -n awx awx -o jsonpath={.spec.host})
                  export AWX_URL=$(echo "https://$AWX_ROUTE")
                  export AWX_PWD=$(oc -n awx get secret awx-admin-password -o jsonpath='{.data.password}' | base64 --decode && echo)


                  echo "      ------------------------------------------------------------------------------------------------------------------------------------------------------"
                  echo "      üîé Check AWX Project"
                  export AWX_PROJECT_STATUS=$(curl -X "GET" -s "$AWX_URL/api/v2/projects/" -u "admin:$AWX_PWD" --insecure -H 'content-type: application/json'|jq|grep successful|grep -c "")
                  if  ([[ $AWX_PROJECT_STATUS -lt 4 ]]); 
                        then 
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="AWX Project not ready"
                              handleError
                        else  
                              echo "      ‚úÖ OK"; 
                        fi

                  echo "      ------------------------------------------------------------------------------------------------------------------------------------------------------"
                  echo "      üîé Check AWX Inventory"
                  export AWX_INVENTORY_COUNT=$(curl -X "GET" -s "$AWX_URL/api/v2/inventories/" -u "admin:$AWX_PWD" --insecure -H 'content-type: application/json'| jq ".count")
                  if  ([[ $AWX_INVENTORY_COUNT -lt 2 ]]); 
                        then 
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="AWX Inventory not ready"
                              handleError
                        else  
                              echo "      ‚úÖ OK"; 
                        fi

                  echo "      ------------------------------------------------------------------------------------------------------------------------------------------------------"
                  echo "      üîé Check AWX Templates"
                  export AWX_TEMPLATE_COUNT=$(curl -X "GET" -s "$AWX_URL/api/v2/job_templates/" -u "admin:$AWX_PWD" --insecure -H 'content-type: application/json'| jq ".count")
                  if  ([[ $AWX_TEMPLATE_COUNT -lt 5 ]]); 
                        then 
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="AWX Templates not ready"
                              handleError
                        else  
                              echo "      ‚úÖ OK"; 
                        fi

                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "    üîé CHECK Runbooks in CP4WAIOps"
                        echo "    --------------------------------------------------------------------------------------------------------------------------------------------------------"
                        CPD_ROUTE=$(oc get route cpd -n $WAIOPS_NAMESPACE  -o jsonpath={.spec.host} || true) 

                  
                  export result=$(curl -X "GET" -s -k "https://$CPD_ROUTE/aiops/api/story-manager/rba/v1/runbooks" \
                        -H "Authorization: bearer $ZEN_TOKEN" \
                        -H 'Content-Type: application/json; charset=utf-8')
                  export RB_COUNT=$(echo $result|jq ".[].name"|grep -c "")
                  if  ([[ $AWX_TEMPLATE_COUNT -lt 3 ]]); 
                        then 
                              export CURRENT_ERROR=true
                              export CURRENT_ERROR_STRING="CP4WAIOps Runbooks not ready"
                              handleError
                        else  
                              echo "      ‚úÖ OK"; 
                        fi



                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo "  üöÄ CHECK Various things"
                        echo "  ----------------------------------------------------------------------------------------------------------------------------------------------------------"
                        echo ""

                        echo "    --------------------------------------------------------------------------------------------"
                        echo "    üîé Check Error Events"
                        echo ""
                        oc get events -A|grep Error| sed 's/^/       /'


                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo ""
                        echo ""
                  if  ([[ $ERROR == true ]]); 
                  then
                        echo ""
                        echo ""
                        echo "***************************************************************************************************************************************************"
                        echo "***************************************************************************************************************************************************"
                        echo "  ‚ùó Your installation has the following errors ‚ùó"
                        echo ""
                        echo "      $ERROR_STRING" | sed 's/^/       /'
                        echo ""
                        echo "***************************************************************************************************************************************************"
                        echo "***************************************************************************************************************************************************"
                        echo ""
                        echo ""
                  else
                        echo ""
                        echo ""
                        echo "***************************************************************************************************************************************************"
                        echo "***************************************************************************************************************************************************"
                        echo "  "
                        echo ""
                        echo "      ‚úÖ Your installation seems to be fine"
                        echo ""
                        echo "***************************************************************************************************************************************************"
                        echo "***************************************************************************************************************************************************"
                        echo ""
                        echo ""

                  fi



              sleep 60000

      restartPolicy: Never
  backoffLimit: 4
